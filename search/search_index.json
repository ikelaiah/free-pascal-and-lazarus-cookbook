{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Free Pascal &amp; Lazarus Cookbook","text":"<p>Welcome to my Free Pascal and Lazarus IDE Cookbook! </p> <p>Inside, you'll discover a collection of handy recipes (snippets) and study notes for the Free Pascal programming language and Lazarus IDE, contributed by both myself and others.</p> <p>Uncover time-saving recipes and streamline your work in Free Pascal!</p> <p>If you're seeking tutorials and in-depth technical discussions, don't miss Resources.</p>"},{"location":"#github-repos","title":"GitHub Repos","text":"<p>The repo of this cookbook: https://github.com/ikelaiah/free-pascal-and-lazarus-cookbook.</p> <p>The repo of the snippets: https://github.com/ikelaiah/free-pascal-snippets.</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>The FPC devs for sharing the joy of Object Pascal.</li> <li>The Lazarus IDE devs for making such an amazing IDE.</li> <li>The dedicated people behind various units/modules in OPM.</li> <li> <p>The kind and helpful individuals on various online platforms such as;</p> <ul> <li>Unofficial Free Pascal discord server.</li> <li>Free Pascal &amp; Lazarus forum.</li> <li>Tweaking4All Delphi, Lazarus, Free Pascal forum.</li> <li>Laz Planet - Blogspot / Laz Planet - GitLab.</li> <li>Delphi Basics.</li> </ul> </li> </ul> <p>Note</p> <p>Code snippets on this site work with <code>FPC 3.2.3</code> and <code>Lazarus 3.3</code>.</p> <p>Warning</p> <p>This document is a work in progress. </p> <p>Contents are still being revised and added.</p>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright \u00a9 2024 ikelaiah</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/","title":"About This Site","text":""},{"location":"about/#why-this-site","title":"Why This Site?","text":"<ol> <li>When I started to learn Object Pascal with Free Pascal and Lazarus IDE, I found the wikis informative, but difficult for me to follow due to my knowledge gap and English as second language.</li> <li>I found gems on Free Pascal (and Lazarus) out there and would like to put them all in one bucket for quick retrieval.</li> <li>Documenting stuff is theraputic.</li> </ol> <p>Hence, this site.</p> <p>I'm compiling my own snippets and others, also related resources for studying Free Pascal and Lazarus IDE. I'm hoping others would find these collections useful too.</p> <p>I've taken care to acknowledge the original location of information &amp; authors whenever possible. If I overlooked anyone, please inform me.</p> <p>Thanks for reading.</p>"},{"location":"community/","title":"Community","text":"<p>Here are chats, mailing lists, conferences and events that relate to Free Pascal, Lazarus and other Object Pascal dialects that transferrable to Free Pascal.</p>"},{"location":"community/#chats","title":"Chats","text":""},{"location":"community/#forums","title":"Forums","text":"<ul> <li>Free Pascal and Lazarus</li> </ul>"},{"location":"community/#discord-servers","title":"Discord Servers","text":"<ul> <li>Unofficial Free Pascal</li> <li>Delphi Community</li> </ul>"},{"location":"community/#irc","title":"IRC","text":"<ul> <li><code>#lazarus</code> at <code>web.libera.chat</code>. <ul> <li>You can access it via Free Pascal &amp; Lazarus forum</li> </ul> </li> <li><code>#fpc</code> and <code>#fpc-alt</code> on <code>irc.libera.chat</code></li> </ul> <p>Note</p> <p>I have not been able to join the <code>irc.libera.chat</code></p> <p>The <code>irc.libera.chat</code> is for off-topic discussions.</p> <p>The FPC core team has no control over either of these channels.</p>"},{"location":"community/#email-lists","title":"Email Lists","text":"<ul> <li>Free Pascal Mailing Lists<ul> <li>FPC-Pascal: Use the Free Pascal mailing list for questions, updates, and assistance in current and future developments.</li> <li>FPC-Devel: Join the development mailing list for bug reports or technical questions. It's also used to announce new snapshots and small patches for compiler bugs.</li> <li>FPC-Announce: Important announcements (e.g., new releases) will be posted here.</li> <li><code>pas2js</code>: For questions and discussions on the <code>pas2js</code> (Pascal-to-JavaScript) compiler.</li> <li>FPC-Other: For all other topics not covered in the above categories.</li> <li>MacPascal: This is the place for discussions about using FPC on the Mac and for iOS devices, although it's not FPC-specific.</li> </ul> </li> <li>Lazarus Mailing Lists</li> </ul>"},{"location":"community/#devsrepos","title":"Devs/Repos","text":"<ul> <li>FPC - Gitlab</li> <li>Lazarus IDE - Gitlab</li> </ul>"},{"location":"community/#twitter-channels","title":"Twitter Channels","text":"<ul> <li>Lazarus Dev</li> <li>Free Pascal Dev</li> <li>Pascal Congress</li> </ul>"},{"location":"community/#conferences-and-events","title":"Conferences and Events","text":"<ul> <li>Conferences and Events from Free pascal wiki site</li> <li>International Pascal Congress</li> </ul>"},{"location":"docs/advanced/concurrent-parallel/","title":"Threading(Concurrency) and Parallelism","text":"<p>Threading = Do various tasks together.</p> <p>Parallelism = Do one task in less time using multiple cores.</p>"},{"location":"docs/advanced/concurrent-parallel/#perform-tasks-on-multiple-threads","title":"Perform tasks on multiple threads","text":"<p>Contribution</p> <p>2024-02-08 - paweld \ud83c\uddf5\ud83c\uddf1 caught a memory leak in the original code and fixed it.</p> <p>Thank you!</p> <ol> <li>Create a class, for example <code>TTaskThread</code>, based on <code>TThread</code>. Prepare to override <code>Execute</code> and define a constructor <code>Create</code>. Line 17-24.</li> <li>Override <code>Execute</code>. Line 27-34.<ul> <li>This procedure contains your task to perform.</li> </ul> </li> <li>Define a constructor. Line 36-43.<ul> <li>call constructor of <code>TThread</code>,</li> <li>set free on terminate and</li> <li>Start thread. </li> </ul> </li> <li>Create all threads.</li> </ol> <pre><code>program CreateThreads;\n\n// 2024-02-08 - paweld \ud83c\uddf5\ud83c\uddf1 fixed a memory leak issue in the original code.\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$ifdef unix}\n  cmem, cthreads,\n  {$endif}\n  Classes,\n  SysUtils;\n\ntype\n  // Create a class based on TThread\n  // TTaskThread\n  TTaskThread = class(TThread)\n  protected\n    // Override the Execute procedure of TThread\n    procedure Execute; override;\n  public\n    // Thread constructor with free on terminate\n    constructor Create;\n  end;\n\n  // The Execute procedure, simulating a task\n  procedure TTaskThread.Execute;\n  begin\n    WriteLn('Started a task on thread ID ', ThreadID);\n\n    Sleep(Random(5)); // simulate a time to complete a task\n\n    WriteLn('Sending a terminate signal to thread ID: ', ThreadID);\n  end;\n\n  // Constructor of TTaskThread\n  constructor TTaskThread.Create;\n  begin\n    //create suspended\n    inherited Create(True);\n    FreeOnTerminate := True;\n    //run thread\n    Start;\n  end;\n\nvar\n  task1, task2: TThread;\n\nbegin\n  WriteLn('---------------------');\n  WriteLn('Started TThread demo');\n  WriteLn('---------------------');\n\n  // Create all threads\n  task1 := TTaskThread.Create;\n  task2 := TTaskThread.Create;\n\n  // Start a task on the main thread\n  Writeln('Starting a task from the main thread');\n  Sleep(Random(5)); // simulate a task\n  Writeln('Completed the task from the main thread');\n\n  WriteLn('---------------------');\n  WriteLn('Finished TThread demo');\n  WriteLn('Press Enter to quit');\n  WriteLn('---------------------');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/advanced/conditional-compilation/","title":"Conditional Compilation","text":""},{"location":"docs/advanced/conditional-compilation/#how-can-i-compile-conditionally","title":"How can I compile conditionally?","text":""},{"location":"docs/advanced/conditional-compilation/#use-ifdef","title":"Use <code>{$IFDEF}</code>","text":"<p>You can use <code>$DEFINE</code> to define a symbol to compile your program conditionally.</p> <p>For example.</p> <pre><code>{$DEFINE name}\n</code></pre> <p>Then, use <code>$IFDEF name</code> to start the conditional compilation. Use <code>$ENDIF some ignored comments</code> to end the conditonal compilation.</p> <pre><code> {$IFDEF name}\n\n // More code ...\n\n {$ENDIF name}\n</code></pre> <p>You can combine multiple <code>{$IFDEF}</code>s too. See the following example (taken from [https://wiki.freepascal.org/\\(IF](https://wiki.freepascal.org/\\)IF)).</p> <pre><code>//Before you need write these conditions to check some conditions:\n{$DEFINE SOMETHING}\n{$DEFINE SOMETHINGELSE}\n{$IFDEF SOMETHING} //Combine $IFDEF to check multiple conditions\n  {$IFDEF SOMETHINGELSE}\n    {$ModeSwitch advancedrecords}\n  {$ENDIF}\n{$ENDIF}\n</code></pre>"},{"location":"docs/advanced/conditional-compilation/#use-if","title":"Use <code>{$IF}</code>","text":"<p><code>{$IF}</code> allows you to write complex conditions that cannot be done using <code>{$ifdef aname}</code>.</p> <p>See the following example from [https://wiki.freepascal.org/\\(IF](https://wiki.freepascal.org/\\)IF). You can see two local directives (<code>$DEFINE</code> and <code>$UNDEF</code>) along with <code>and</code> and <code>or</code> logic operators in it.</p> <pre><code>{$IF defined(SOMETHING) and defined(SOMETHINGELSE)}//simple and readabl instead of union {$IFDef}`s\n  {$ModeSwitch advancedrecords}\n{$ENDIF} \n\n{$IF defined(somthing) or defined(somethingelse)}\n  //Whatever you need!\n{$ENDIF}\n\n{$IF undefined(what) and defined(somethingelse)}\n  //Just for note, Another usage!\n{$ENDIF}\n</code></pre> <p>References</p> <ul> <li>Lazarus - Easy trick on how to use {$IFDEF DEBUG} for simple debugging by Hans Luijten on Tweaking4All.</li> <li>Conditional Compilation <code>{$IFDEF}</code> - Free Pascal Wiki</li> <li>Conditional Compilation with <code>{$IF}</code> - Free Pascal Wiki</li> </ul>"},{"location":"docs/advanced/conditional-compilation/#useful-symbols-for-conditional-compilation","title":"Useful symbols for conditional compilation","text":"<p>Here is an example contributed by \ud835\udcda\ud835\udcf8\ud835\udced\ud835\udcee\ud835\udce9\ud835\udd00\ud835\udcee\ud835\udcfb\ud835\udcf0 \ud83c\udde9\ud83c\uddea (Unofficial Free Pascal Discord).</p> <pre><code>{$IF Defined(DCC) or Defined(VER210) or Defined(VER200) or Defined(VER190) or Defined(VER185) or Defined(VER180) or Defined(VER170) or Defined(VER160) or Defined(VER150) or Defined(VER140) or Defined(VER130) or Defined(VER120) or Defined(VER100) or Defined(VER90) or Defined(VER80)}\n  {$DEFINE Delphi} { Delphi }\n{$IFEND}\n\n{$IF Defined(DELPHI) and Declared(CompilerVersion) and (CompilerVersion &gt;= 25)}\n  {$LEGACYIFEND ON}\n{$IFEND}\n\n{$IF Defined(FPC)}\n  {$DEFINE Lazarus} { Lazarus and Free Pascal }\n{$IFEND}\n\n{$IF Defined(DELPHI) and Declared(CompilerVersion) and (CompilerVersion &gt;= 23)}\n  {$DEFINE NameSpace} { Delphis NameSpace feature (eg Winapi.Windows instead of Windows) }\n{$IFEND}\n\n{$IF Defined(DELPHI) and Declared(CompilerVersion) and (CompilerVersion &gt;= 20)}\n  {$DEFINE UniCode} { Delphis UniCode support }\n{$IFEND}\n\n{$IF Defined(WIN32) or Defined(WIN64) or Defined(MSWindows)}\n  {$DEFINE Windows} { We are on Windows }\n{$IFEND Windows}\n\n{$IF Defined(FPC) and Declared(FPC_VERSION) and (FPC_VERSION &gt;= 3)}\n  {$DEFINE UniCode} { FreePascal UniCode support }\n{$IFEND}\n</code></pre> <p>And here's an example of how you might use these symbols.</p> <pre><code>begin\n{$IFDEF Delphi}\n    // Specific code for Delphi mode\n{$ENDIF}\n\n{$IFDEF Lazarus}\n    // Specific code for Lazarus and Free Pascal\n{$ENDIF}\n\n{$IFDEF Namespace}\n    // Specific code for Delphi's namespace\n{$ENDIF}\n\n{$IFDEF Windows}\n    // Specific code for Windows\n{$ENDIF}\n\n{$IFDEF UniCode}\n    // Code relies on Unicode\n{$ENDIF}\nend.\n</code></pre>"},{"location":"docs/advanced/debugging/","title":"Debugging","text":""},{"location":"docs/advanced/debugging/#official-docs-on-debugging-free-pascal-programs","title":"Official docs on debugging Free Pascal programs","text":"<p>Here is the official docs by Micha\u00ebl Van Canneyt and Florian Kl\u00e4mpfl; Debugging your Program.</p>"},{"location":"docs/advanced/debugging/#create-debug-and-release-profiles-in-lazarus","title":"Create Debug and Release profiles in Lazarus","text":"<ol> <li>Open a new project in Lazarus IDE</li> <li>Go to Project | Options | Compiler Options</li> <li>In the Build modes (by default says default) click the <code>...</code> button.</li> <li>In the Build Mode window, click Create Debug and Release modes buttion.</li> </ol> <p>Once you've done that, you will see two new profiles; <code>Debug</code> and <code>Release</code>.</p> <p>Use the <code>Debug</code> profile if you need to detect heap memory leaks.</p> <p>Use <code>Release</code> for production.</p>"},{"location":"docs/advanced/debugging/#debugger-to-use-in-lazarus-ide","title":"Debugger to use in Lazarus IDE","text":"<p>Citing from https://wiki.lazarus.freepascal.org/DWARF</p> <p>For GDB \"DWARFv2 with sets\" is the best option. Testing shows that, if using other (v3 and up) DWARF (as generated by FPC) then GDB is more likely to crash.</p> <p>debugger may not be able to distinguish between PChar and AnsiString All identifiers (e.g. field-names) returned by the debugger are upper-cased ... other diffs</p> <p>DWARF 2 (the one without \"with sets\") does not display sets \"type TMySet = set of (v1,v2,v3)\" correctly.</p>"},{"location":"docs/advanced/debugging/#detecting-heap-memory-leaks","title":"Detecting heap memory leaks","text":"<p>Consider using the pre-defined Debug mode from Create Debug and Release profiles in Lazarus before customising your own debugging environment.</p>"},{"location":"docs/advanced/debugging/#official-docs-on-using-heaptrc","title":"Official docs on using Heaptrc","text":"<ul> <li>HeapTrc Usage</li> <li>RTL - <code>heaptrc</code></li> <li>RTL - <code>SetHeapTraceOutput</code></li> <li>Controlling HeapTrc with environment variables</li> <li>Wiki - Using Heaptrc in FPC</li> <li>Wiki - Using LeakView in Lazarus</li> </ul>"},{"location":"docs/advanced/debugging/#detecting-heap-memory-leaks-in-lazarus","title":"Detecting heap memory leaks in Lazarus","text":"<p>1. Enable HeapTrc in Lazarus</p> <p>First, go to <code>Project | Project Options ...</code> </p> <p>In the Options window find <code>Compiler Options | Debugging</code>, then enable the following switches.</p> <ul> <li>[Mandatory] <code>Use Heaptrc unit (check for mem-leaks) (-gh)</code></li> <li>[Optional] <code>Display line numbers in run-time errors backtraces (-gl)</code></li> </ul> <p>Click the image below to expand the view.</p> <p></p> <p>2. Save leaks report to a file</p> <p>Simply use <code>SetHeapTraceOutput</code> to redirect heap trace report to a file.</p> <p>Here is an example.</p> <ol> <li> <p>Define a <code>DEBUG</code> symbol. We contain the heap trace report only for debug builds. Line 7.</p> <ul> <li>FYI, the <code>{$DEFINE}</code> directive has a command-line equivalent, <code>-d</code>.  For example, <code>-dNAME</code></li> </ul> </li> <li> <p>Create a conditional compilation block for <code>DEBUG</code> builds, <code>{$IFDEF DEBUG}...{$ENDIF DEBUG}</code>, for redirecting heap trace to a file. Line 23-31.</p> <ul> <li>Remove existing heap trace file. Line 28, 29.</li> <li>Set a file for reporting heap memory leaks. Line 30.</li> </ul> </li> </ol> <pre><code>program HeapMemoryLeakLazarus;\n\n{$mode objfpc}{$H+}{$J-}\n\n// Define a symbol name DEBUG.\n// With this compiler directives we can compile parts of code associated with this symbol.\n{$DEFINE DEBUG}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  stringList: TStringList;\n  i: integer;\n\n  // MAIN block\nbegin\n\n  {$IFDEF DEBUG}\n  // This block assumes your build mode sets -dDEBUG in `Project Options` or other means when defining -gh.\n  // For production build, remove -dDEBUG in `Project Options` or other means and disable -gh.\n\n  // Setup Heaptrc output for the Leak and Traces window in Lazarus.\n  if FileExists('heap.trc') then\n    DeleteFile('heap.trc');\n  SetHeapTraceOutput('heap.trc');\n  {$ENDIF DEBUG}\n\n  // Create a string list\n  stringList := TStringList.Create;\n\n  try\n    // Adding items\n    WriteLn('Adding items');\n    WriteLn('--------------------');\n    for i := 0 to 4 do\n      stringList.Add('Counting ' + IntToStr(i));\n\n    // Printing contents\n    for i:=0 to stringList.Count - 1 do\n      WriteLn(stringList[i]);\n\n  finally\n    // If you don't free, the -gh will give report of memory leaks\n    // If Leak and Traces window is set to a heap trace file, this will appear in the Leak and Traces windoww.\n    // Otherwise, Heaptrc will print heap memory reports on CLI.\n    stringList.Free;\n  end;\n\n  // Pause Console\n  WriteLn('Press Enter key to quit.');\n  ReadLn;\nend.\n</code></pre> <p>After you run the program, you will get a heap trace report file.</p> <p>3. View Leaks &amp; Traces</p> <ol> <li>Click <code>View</code> form the top menu bar of Lazarus IDE.</li> <li>Select <code>Leaks and Traces</code></li> <li>Set the <code>.trc</code> file to read by pressing the <code>...</code> (elipsis) button.</li> <li>Click the Update button to reload latest changes to the <code>.trc</code> file.</li> </ol> <p>Click the image below to expand the view.</p> <p></p> <p>Now, whenever you run the program in DEBUG mode from Lazarus IDE, simply press the Update button on the Leaks and Traces window to see the latest heap memory report.</p> <p>If there is any leaks in the program, pressing the Update button will show leaking memory size, leaking blocks counts and the details of leaking blocks.</p> <p>Click the image below to expand the view.</p> <p></p>"},{"location":"docs/advanced/overview/","title":"Advanced Topics","text":"<p>This section covers more difficult topics (beyond the core tasks) using Free Pascal and Lazarus.</p> <p>Choose a topic from the left sidebar.</p>"},{"location":"docs/basics/cmd-line-params/","title":"Command Line Parameters","text":""},{"location":"docs/basics/cmd-line-params/#how-do-i-capture-command-line-arguments","title":"How do I capture command line arguments?","text":"<p>Use <code>ParamStr(n)</code> to get the n-th arguments.</p> <p>Note, <code>ParamStr(0)</code> gives you the name of the program or location where the program is invoked.</p> <p>While <code>ParamCount</code> give you the number of arguments.</p> <p>Here is an example.</p> <pre><code>program CLSimple;\n\nvar\n  i: integer;\n\nbegin\n  WriteLn('Number of command line arguments: ', ParamCount);\n\n    // Display all command line arguments\n  for i := 0 to ParamCount do\n    WriteLn('Argument ', i, ': ', ParamStr(i));\nend.\n</code></pre> <p>When you compile and run the snippet above on a CLI followed by <code>a b c</code>, you will see the list of arguments given.</p> <pre><code>$ ./CLSimple.exe a b c\nNumber of command line arguments: 3\nArgument 0: path-to-your-program/CLSimple.exe\nArgument 1: a\nArgument 2: b\nArgument 3: c\n</code></pre>"},{"location":"docs/basics/cmd-line-params/#how-can-i-capture-short-options","title":"How can I capture short options?","text":"<p>Use <code>getopt</code>. See an example below.</p> <ol> <li>In <code>uses</code> section add <code>getopt</code>. Line 17.</li> <li>Create a short option string, in our example, <code>a:bcd</code>. Line 24.</li> <li>Call <code>getopt(shortOpts)</code> in a loop<ul> <li>capture and action each option</li> <li>deal with <code>?</code> and <code>:</code> (for invalid option and missing argument)</li> <li>until it returns <code>EndOfOptions</code>. Line 36-55.</li> </ul> </li> </ol> <pre><code>program GetOptSimple;\n\n// Example usage (git bash):\n\n// $ ./GetOptSimple -a \"Hello\" -b -c -d\n// $ ./GetOptSimple -a \"Hello\" -bc -d\n// $ ./GetOptSimple -a \"Hello\" -bcd\n// $ ./GetOptSimple -dcb -a \"Hello\"\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  getopts;\n\nvar\n  c: char = DEFAULT(char);\n  shortOpts: string;\n\nbegin\n\n  // If the external variable opterr is True (which is the default),\n  // getopt prints an error message.\n  // Ref: https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html\n  //      https://www.freepascal.org/daily/doc/rtl/getopts/getopt.html\n  OptErr := False;\n\n  // Defining valid short options\n  // For example; -a requires an argument,\n  //              -b, -c and -d don't.\n  shortOpts := 'a:bcd';\n\n  repeat\n    c := getopt(shortOpts);\n    case c of\n      'a': WriteLn('Option a was set with value ', optarg);\n      'b': WriteLn('Option b was set');\n      'c': WriteLn('Option c was set');\n      'd': WriteLn('Option d was set');\n      '?', ':': begin\n        // If getopt finds an option character in argv that was not included\n        // in options, or a missing option argument,\n        //    - it returns `?` and\n        //    - sets the external variable `optopt` to the actual option character.\n        // If the first character of options is a colon (\u2018:\u2019),\n        //    - then getopt returns \u2018:\u2019 instead of \u2018?\u2019 to indicate a missing option argument.\n        // Refs\n        // - https://www.freepascal.org/docs-html/rtl/getopts/index.html\n        // - https://www.gnu.org/software/libc/manual/html_node/Using-Getopt.html\n        if (optopt = 'a') then\n          WriteLn('Error: Option ', optopt, ' needs an argument.')\n        else\n          WriteLn('Error: Unknown option: ', optopt);\n      end;\n    end; // case\n  until c = EndOfOptions;\n\n  // The reminder, checks for non-option arguments (if any) using optind\n  if optind &lt;= paramcount then\n  begin\n    Write('Non options : ');\n    while optind &lt;= paramcount do\n    begin\n      Write(ParamStr(optind), ' ');\n      Inc(optind);\n    end;\n    WriteLn;\n  end;\n\nend.\n</code></pre>"},{"location":"docs/basics/code-structure/","title":"Structuring Your Codes","text":""},{"location":"docs/basics/code-structure/#structure-of-a-pascal-program","title":"Structure of a Pascal Program","text":"<p>Here is a common structure of a Pascal program.</p> <pre><code>program ProgramStructure;\n\n// Global compiler directives here\n// Ref: https://www.freepascal.org/docs-html/prog/progse3.html\n\nuses\n  // Add units here\n\nconst\n  // Add consts here\n  // Refs: https://www.freepascal.org/docs-html/ref/refse9.html#x21-200002.1\n  //       https://www.freepascal.org/docs-html/ref/refse10.html#x22-210002.2\n\nresourcestring\n  // Declare resourcestrings\n  // Ref: https://www.freepascal.org/docs-html/ref/refse11.html\n\ntype\n  // Declare types\n\nvar\n  // Declare variables, initialise when possible\n\nthreadvar\n  // Declare threadvars\n  // Variables in this section have unique values for each thread\n  // Ref: https://www.freepascal.org/docs-html/ref/refse26.html\n\n  // Define procedures and functions before the MAIN entry/block of the program\n\nbegin\n   // This is the MAIN entry/block\nend.         \n</code></pre>"},{"location":"docs/basics/code-structure/#an-example-of-a-pascal-program","title":"An example of a Pascal Program","text":"<p>Here is a program example that stores student information in a record, and print it on the console.</p> <pre><code>program SimpleProgram;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nconst\n  student_id_prefix: string = 'ua-';\n\ntype\n  TStudent = record\n    studentId: string;\n    firstname: string;\n    lastname: string;\n  end;\n\n  // Prints the contents of a TStudent var\n  procedure PrintStudentInfo(student: TStudent);\n  begin\n    WriteLn(student.studentId);\n    WriteLn(student.firstname, ' ', student.lastname);\n  end;\n\nvar\n  myStudent: TStudent;\n\nbegin\n  // The Main block/entry of the program\n\n  WriteLn('Now : ', DateToStr(Now));\n\n  myStudent.firstname := 'John';\n  myStudent.lastname := 'Costco';\n  myStudent.studentId := student_id_prefix + '2227209';\n  PrintStudentInfo(myStudent);\n\n  // Pause console\n  WriteLn('Press Enter key to quit ...');\n  ReadLn();\nend.\n</code></pre> <p>The output as follows.</p> <pre><code>Now : 16/12/2023\nua-2227209\nJohn Costco\nPress Enter key to quit ...\n</code></pre>"},{"location":"docs/basics/code-structure/#structure-a-unit","title":"Structure a Unit","text":"<pre><code>program UnitStructure;\n\ninterface\n\n  // This is the Public section.\n  // Variables, functions and procedures declared in this section\n  // will be accessible from the unit's caller.\n\nimplementation\n\n  // This is the Private section.\n  // Anything declared in this section will only be available to the unit.\n\ninitialization\n\n  // Optional. Code that runs when the unit gets loaded.\n  // Ref: https://www.freepascal.org/docs-html/ref/refse112.html#x233-25700016.2\n\nfinalization\n\n  // Optional. Code that runs when the program ends normally.\n  // The finalization part of the units are executed in the\n  // reverse order of the initialization execution.\n  // Ref: https://www.freepascal.org/docs-html/ref/refse112.html#x233-25700016.2\n\nend.\n</code></pre>"},{"location":"docs/basics/code-structure/#an-example-of-a-unit","title":"An Example of a Unit","text":"<p>Here is an example of a simple unit for calculating the areas of a square and a circle.</p> <ol> <li>the unit has a private variable called <code>short_pi</code>, which is not available outside the unit itself.</li> <li>the unit has two public functions.</li> </ol> <pre><code>unit Areas;\n\ninterface\n\nfunction CalcAreaSquare(side: real): real;\nfunction CalcAreaCircle(radius: real): real;\n\nimplementation\n\nconst\n  shortPI: real = 3.14;\n\nfunction CalcAreaSquare(side: real): real;\nbegin\n  Result := side * side;\nend;\n\nfunction CalcAreaCircle(radius: real): real;\nbegin\n  Result := shortPI * radius * radius;\nend;\n\nend.\n</code></pre> <p>We can use this <code>Areas</code> unit as follows.</p> <pre><code>program SimpleProgramWithUnit;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  Areas;\n\nbegin\n  // Calculate area of a square\n  WriteLn('Area of 2.5cm square is ',\n          CalcAreaSquare(2.5): 0: 2,\n          ' cm\u00b2.');\n\n  // Calculate area of a circle\n  WriteLn('Area of a circle with r=2.5cm is ',\n          CalcAreaCircle(2.5):0: 2,\n          ' cm\u00b2.');\n\n  // The following WriteLn will not compile\n  // Because shortPI is declared in the private section of the Area unit\n  // WriteLn('shortPI is ', Areas.shortPI);\n\n  // Pause console\n  WriteLn('Press Enter key to exit ...');\n  ReadLn;\nend.\n</code></pre> <p>Contribution</p> <p>2024-02-08 - Gustavo 'Gus' Carreno \ud83c\uddf5\ud83c\uddf9 pointed out on the original code; it is not necessary to include the unit's name when calling a routine.</p> <p>Previously we had <code>CalcAreaCircle(2.5)</code> as <code>Areas.CalcAreaCircle(2.5)</code>.</p> <p>Anything in the <code>interface</code> section of a Unit will become global for the scope of the program/unit/dll that includes it. Hence, the code above is only <code>CalcAreaCircle(2.5)</code>.</p> <p>We only need to include the name of the unit if a naming conflict occurs.</p>"},{"location":"docs/basics/dates/","title":"Dates and Times","text":"<p>Format characters</p> <p>The complete list of formatting characters can be found in <code>formatchars</code> doc.</p>"},{"location":"docs/basics/dates/#how-can-i-get-current-date-and-time","title":"How can I get current date and time?","text":"<ol> <li>Add <code>sysutils</code> to the <code>uses</code> section.</li> <li>Use <code>Now</code> to get current date time.</li> </ol> <p>From here you have choices.</p> <ul> <li>You can use <code>DateToStr</code> to get only the date string from <code>Now</code>.</li> <li>You can use <code>TimeToStr</code> to get only the time string from <code>Now</code>.</li> <li>You can use <code>DateTimeToStr</code> to get the date time string from <code>Now</code>.</li> <li>You can use <code>FormatDateTime</code> to customise the date time string from <code>Now</code>.</li> </ul> <p>Here is an example.</p> <pre><code>program DateTimeCurrent;\n\nuses\n  SysUtils;\n\nbegin\n\n  // Display current date only with the default formatting\n  WriteLn('Date: ', DateToStr(Now));\n\n  // Display current time only with the default formatting\n  Writeln('Time: ', TimeToStr(Now));\n\n  // Display current timestamp with the default formatting\n  Writeln('Now is (default format): ', DateTimeToStr(Now));\n\n  // Display timestamp with custom formatting\n  Writeln('Now is (custom format) : ',\n          FormatDateTime('yyyy-mm-dd hh:nn:ss.z', Now));\n  Writeln('Now is (custom format) : ',\n          FormatDateTime('dd-mmm-yy hh:nn AM/PM', Now));\n\n  // Display timestamp in long format -- Tuesday, 9 January 2024 12:08:17 PM\n  Writeln('Now is (custom format) : ', FormatDateTime('dddddd tt', Now));\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dates/#how-to-get-unix-epoch-time","title":"How to get Unix epoch time?","text":"<ol> <li>In <code>uses</code> section add <code>SysUtils</code> and <code>DateUtils</code>.  </li> <li>Call <code>DateTimeToUnix(Now);</code>.</li> </ol> <pre><code>program DateTimeUnix;\n\nuses\n  SysUtils,\n  DateUtils;\n\nvar\n  unixTime: integer;\n\nbegin\n  unixTime := DateTimeToUnix(Now);\n  Writeln('Current time in Unix epoch time is: ', unixTime);\n\n  // Pause console;\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dates/#finding-days-or-time-between-dates","title":"Finding days or time between dates","text":"<p>You can use any of the following to find days or time between dates.</p> <ul> <li><code>YearsBetween</code> - The number of whole years between two <code>TDateTime</code> values</li> <li><code>MonthsBetween</code> - The number of whole months between two <code>TDateTime</code> values</li> <li><code>WeeksBetween</code> - The number of whole weeks between two <code>TDateTime</code> values</li> <li><code>DaysBetween</code> - Number of whole days between two <code>TDateTime</code> values.</li> <li><code>HoursBetween</code> - The number of whole hours between two <code>TDateTime</code> values.</li> <li><code>MinutesBetween</code> - The number of whole minutes between two <code>TDateTime</code> values.</li> <li><code>SecondsBetween</code> - The number of whole seconds between two <code>TDateTime</code> values.</li> <li><code>MilliSecondsBetween</code> - The number of whole milliseconds between two <code>TDateTime</code> values.</li> </ul> <p>Here is an example of using <code>SecondsBetween</code> and <code>DaysBetween</code>.</p> <pre><code>program DateTimeBetween;\n\nuses\n  SysUtils,\n  DateUtils;\n\nvar\n  diffSec, diffDay: integer;\n\nbegin\n\n  // Seconds between 2 times\n  diffSec := SecondsBetween(StrToTime('18:30'), StrToTime('07:35'));\n  WriteLn('The seconds between 18:30 and 07:35 is: ', diffSec, ' seconds');\n\n  // Days between 2 dates\n  diffDay := DaysBetween(StrToDate('09/01/2024'), StrToDate('01/01/2015'));\n  WriteLn('The days difference between 2024-01-05 and 2015-01-01 is: ', diffDay, ' days');\n\n  // Seconds between 2 dates\n  // Casting diffsec to float for nicer formatting\n  diffSec := SecondsBetween(StrToDate('09/01/2024'), StrToDate('01/01/2015'));\n  WriteLn('The seconds between 2024-01-05 and 2015-01-01 is: ', Format('%n', [diffSec + 0.0]),' seconds');\n\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dates/#simple-profiling-a-section-of-a-program","title":"Simple profiling a section of a program","text":"<ol> <li>Place the <code>GetTickCount64</code> before and after a specific section of code.</li> <li>Calculate the elapsed time in milliseconds by subtracting the initial value from the final value obtained from <code>GetTickCount64</code>.</li> </ol> <p>Warning</p> <p><code>GetTickCount64</code> returns an increasing clock tick count in milliseconds. It is useful for time measurements, but no assumptions should be made as to the interval between the ticks.</p> <p>https://www.freepascal.org/daily/doc/rtl/sysutils/gettickcount64.html</p> <p>Here is an example.</p> <pre><code>program DateTimeBenchmark;\n\nuses\n  SysUtils;\n\nvar\n  startTime, endTime: QWord;\n\nbegin\n\n  // Get start time.\n  startTime := GetTickCount64;\n\n  // Simulate a long running task\n  Sleep(1000);\n\n  // Get end time\n  endTime := GetTickCount64;\n\n  // Display time elapsed\n  Writeln('Time elapsed: ', (endTime-startTime), ' ms');\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dates/#how-can-i-compare-two-dates","title":"How can I compare two dates?","text":"<p>Use the comparison operators (<code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>=</code>) to compare two <code>TDateTime</code> values.</p> <p>Consider the following example.</p> <pre><code>program DateTimeComparison;\n\nuses\n  SysUtils,\n  DateUtils;\n\nvar\n  surveyReleaseDate: TDateTime;\n\nbegin\n\n  // Set survey release date\n  surveyReleaseDate := StrToDate('15/12/2024');\n\n  if surveyReleaseDate &lt; Now then\n  begin\n    WriteLn('You can release survey results now');\n    WriteLn('You''re behind by ', DaysBetween(Now, surveyReleaseDate), ' days.');\n  end\n  else\n  begin\n    WriteLn('You CANNOT release survey results! Wait!');\n    WriteLn('You can release results in ', DaysBetween(Now, surveyReleaseDate), ' days.');\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dates/#how-do-i-parse-a-string-date-in-dd-mmm-yy-format","title":"How do I parse a string date in dd-mmm-yy format?","text":"<p>Use <code>ScanDateTime</code> from <code>DateUtils</code>.</p> <p>Take a look at this example.</p> <pre><code>program ParseDate;\n\nuses\n  SysUtils,\n  DateUtils;\n\nvar\n  dateString: string;\n  parsedDate: TDateTime;\n\nbegin\n\n  // date to parse\n  dateString := '03-MAR-24';\n\n  // default value of parsed date. If conversion fails, use this value\n  parsedDate := Default(TDateTime);\n\n  try\n    parsedDate := ScanDateTime('dd?mmm?yy', dateString);\n    // Now dateValue contains the parsed date, else ScanDateTime will raise an exception\n\n    // Use FormatDateTime to format the parsed date as needed\n    WriteLn('Parsed date                : ', DateToStr(parsedDate));\n    WriteLn('Parsed date (custom format): ', FormatDateTime('dddddd tt', parsedDate));\n    WriteLn('Parsed date (custom format): ', FormatDateTime('yyyy-mm-dd hh:nn:ss', parsedDate));\n  except\n    on E: EConvertError do\n      WriteLn('Invalid date string');\n  end;\n\n  // Pause console\n  Readln;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/","title":"Directories, Path and Filename","text":""},{"location":"docs/basics/dir-path-filename/#get-home-directory-of-current-user","title":"Get home directory of current user","text":"<p>Use <code>GetUserDir</code> from <code>SysUtils</code> unit.</p> <ol> <li>Add <code>SysUtils</code> in the uses section.</li> <li>Call <code>GetUserDir</code>.</li> </ol> <pre><code>program GetHomeDir;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  homeDir: string;\n\nbegin\n\n  // Get home dir\n  homeDir := GetUserDir;\n\n  WriteLn('THe home directory is ', homeDir);\n\n  // Pause console\n  WriteLn('Press enter to quit ...');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#create-a-directory-or-chain-of-directories","title":"Create a directory or chain of directories","text":"<p>Here is a snippet of creating a sub directory called <code>demo/ex-01</code> in the program's current directory.</p> <pre><code>program DirPathFileCreateDir;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes, SysUtils;\n\nvar\n  directoryName: string;\nbegin\n  directoryName := ConcatPaths(['demo','ex-01']);\n  if ForceDirectories(directoryName) then\n    WriteLn('Directory created successfully')\n  else\n    WriteLn('Failed to create directory');\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#create-a-directory-or-chain-of-directories-with-utf8","title":"Create a directory or chain of directories with UTF8","text":"<p>You can use <code>ForceDirectories</code> to create directories with UTF8.</p> <p>Here is a snippet of creating a sub directory called <code>demo/\u80dc\u5229</code> in the program's current directory.</p> <pre><code>program DirPathFileCreateDirUTF8;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes, \n  SysUtils;\n\nvar\n  directoryName: string;\nbegin\n  directoryName := ConcatPaths(['demo','\u80dc\u5229']);\n  if ForceDirectories(directoryName) then\n    WriteLn('Directory created successfully')\n  else\n    WriteLn('Failed to create directory');\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#check-if-a-directory-exists","title":"Check if a directory exists","text":"<p>Use <code>FileExists</code> from unit <code>SysUtils</code>.</p> <pre><code>program CheckDirExists;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nbegin\n\n  if (DirectoryExists('sub-folder/')) then\n    WriteLn('That folder exists!')\n  else\n    WriteLn('Can''t find it!');\n\n  // Pause console\n  ReadLn;\n\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#check-if-a-file-exists","title":"Check if a file exists","text":"<p>Use <code>FileExists</code> from unit <code>SysUtils</code>.</p> <pre><code>program CheckFileExists;\n\nuses\n  SysUtils;\n\nvar\n  fileName: String;\n\nbegin\n  fileName := 'hello-world.txt';\n\n  if FileExists(fileName) then\n    Writeln( fileName, ' exists.')\n  else\n    Writeln(fileName, ' does not exist.');\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#find-a-file-type-in-a-folder-findfirst","title":"Find a file type in a folder (FindFirst)","text":"<p>Here is an example searching for <code>*.csv</code> files using <code>FindFirst</code>.</p> <ol> <li>Add <code>SysUtils</code> in uses section. Line 10.</li> <li> <p>Call <code>FindFirst</code> with 3 arguments. Line 21.</p> <ul> <li>Path and a wildcard pattern.</li> <li>Attribute, use <code>faAnyFile</code>.</li> <li>Outpt TSearchRec variable to store results.</li> </ul> </li> <li> <p>If <code>FindFirst</code> returns 0, loop using <code>repeat ... until FindNext(searchResult) &lt;&gt; 0</code>. Line 23 to 31.</p> </li> <li>Lastly, free resources relating to <code>FindFirst</code> and <code>FindNext</code> using <code>FindClose</code>. Line 39.</li> </ol> <pre><code>program FindFirstSearch;\n\n{$mode objfpc}{$H+}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  searchRec: TSearchRec;\n  path: string = './sub-folder/';\n  criteria: string = '*.csv';\n  Count: integer = 0; // Optional, only if you need a count\n\nbegin\n\n  // Call FindFirst, requires 3 arguments\n  if FindFirst(path + criteria, faAnyFile, searchRec) = 0 then\n  begin\n    repeat\n      if (searchRec.Name &lt;&gt; '.') and (searchRec.Name &lt;&gt; '..') and (searchRec.Attr &lt;&gt; faDirectory) then\n      begin\n        // Optional, only if you need a count -- increase a counter\n        Inc(Count);\n        // Display files found by FindFirst\n        WriteLn(searchRec.Name);\n      end;\n    until FindNext(searchRec) &lt;&gt; 0;\n\n    // A successful FindFirst call must always be followed by a FindClose call\n    // with the same TSearchRec record. Failure to do so will result in memory leaks.\n    // If the findfirst call failed (i.e. returned a nonzero handle) there is\n    // no need to call FindClose.\n    // See https://www.freepascal.org/docs-html/3.2.2/rtl/sysutils/findfirst.html\n    FindClose(searchRec);\n  end;\n\n  // Display count of matching files\n  WriteLn(Format('Found %d files matching %s', [Count, criteria]));\n\n  // Pause console\n  WriteLn;\n  WriteLn('Press Enter key to quit');\n  ReadLn;\nend.\n</code></pre> <p>References</p> <ul> <li>https://www.freepascal.org/docs-html/3.2.2/rtl/sysutils/findfirst.html.</li> <li>https://www.freepascal.org/docs-html/3.2.2/rtl/sysutils/findnext.html</li> <li>https://www.freepascal.org/docs-html/3.2.2/rtl/sysutils/findclose.html</li> </ul>"},{"location":"docs/basics/dir-path-filename/#find-multiple-file-types-in-a-folder-findfirst","title":"Find multiple file types in a folder (FindFirst)","text":"<p>See the snippet below, which looks for <code>*.csv</code> and <code>*.txt</code> files.</p> <p>I added <code>IsFileNameMatching</code> to match <code>searchRec.Name</code> against a regex experssion. Line 13-34.</p> <ol> <li>When calling <code>FindFirst</code> use <code>*</code> or <code>*.*</code>. The Regex will do the filtering. Line 44.</li> <li>In the <code>repeat ... until FindNext(searchRec) &lt;&gt; 0</code> loop, simply match <code>searchRec.Name</code> against a regular expression. That's it. Line 49.</li> <li>Call <code>FindClose</code> to release resources used by <code>FindFirst</code> and <code>FindNext</code>. Line 59. </li> </ol> <pre><code>program FindFirstSearchRegex;\n\n{$mode objfpc}{$H+}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  RegExpr;\n\n  // A function for matching filename against a regex pattern\n  function IsFileNameMatching(const fileName: string; const regexPattern: string): boolean;\n  var\n    regex: TRegExpr;\n  begin\n    regex := TRegExpr.Create;\n    try\n      // Set the regex to case-insensitive\n      regex.ModifierI := True;\n      // Apply the regex pattern\n      regex.Expression := regexPattern;\n\n      // Check for a match\n      if regex.Exec(filename) then\n        Result := True\n      else\n        Result := False;\n    finally\n      // Free TRegExpr\n      regex.Free;\n    end;\n  end;\n\nvar\n  searchRec: TSearchRec;\n  path: string = './sub-folder/';\n  regexExpression: string = '(.csv|.txt)';\n  Count: integer = 0; // Optional, only if you need a count\n\nbegin\n  // Call FindFirst, append *.* to path\n  if FindFirst(path + '*.*', faAnyFile, searchRec) = 0 then\n  begin\n    repeat\n      if (searchRec.Name &lt;&gt; '.') and (searchRec.Name &lt;&gt; '..') and (searchRec.Attr &lt;&gt; faDirectory) then\n      begin\n        if IsFileNameMatching(searchRec.Name, regexExpression) then\n        begin\n          // Optional, only if you need a count -- increase a counter\n          Inc(Count);\n          // Display files found by FindFirst\n          WriteLn(searchRec.Name);\n        end;\n      end;\n    until FindNext(searchRec) &lt;&gt; 0;\n    // MUST FREE RESOURCES relating to FindFirst and FindNext\n    FindClose(searchRec);\n  end;\n\n  // Display count of matching files\n  WriteLn(Format('Found %d files matching %s', [Count, regexExpression]));\n\n  // Pause console\n  WriteLn;\n  WriteLn('Press Enter key to quit');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#find-a-file-type-in-a-folder-and-store-in-an-array-findfirst","title":"Find a file type in a folder and store in an array (FindFirst)","text":"<p>It is pretty straightforward. </p> <p>See the snippet below that looks for <code>*.csv</code> in a folder and store the names of <code>*.csv</code>  files in an <code>array of string</code>.</p> <ol> <li>Add <code>SysUtils</code> in the uses. Line 10.</li> <li>Call the <code>FindFirst</code>. Line 22.</li> <li> <p>Store files found into an array in the in the <code>repeat ... until FindNext(searchRec) &lt;&gt; 0</code> loop. Line 27-32.</p> <ul> <li>Set the new length of the array.</li> <li>Assign the <code>searchRec.Name</code> into the new index.</li> <li>Increment counter to set the new length in the next loop.</li> </ul> </li> <li> <p>Lastly, free resources relating to <code>FindFirst</code> and <code>FindNext</code> using <code>FindClose</code>. Line 36.</p> </li> </ol> <pre><code>program FindFirstSearchStoreArray;\n\n{$mode objfpc}{$H+}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  searchRec: TSearchRec;\n  path: string = './sub-folder/';\n  criteria: string = '*.csv';\n  filesFound: array of string;\n  fileCount: integer = 0;\n  i: integer;\n\nbegin\n  // Call FindFirst, append wildcard pattern to path\n  if FindFirst(path + criteria, faAnyFile, searchRec) = 0 then\n  begin\n    repeat\n      if (searchRec.Name &lt;&gt; '.') and (searchRec.Name &lt;&gt; '..') and (searchRec.Attr &lt;&gt; faDirectory) then\n      begin\n        // Set length the array of string\n        SetLength(filesFound, fileCount + 1);\n        // Add file name from searchRec into this array\n        filesFound[fileCount] := searchRec.Name;\n        // Increment file counter\n        Inc(fileCount);\n      end;\n    until FindNext(searchRec) &lt;&gt; 0;\n    // MUST RELEASE RESOURCES relating to FindFirst and FindNext\n    FindClose(searchRec);\n  end;\n\n  // Display count of matching files\n  WriteLn(Format('Found %d files matching %s', [Length(filesFound), criteria]));\n\n  // Display all files\n  for i := 0 to High(filesFound) do WriteLn(filesFound[i]);\n\n  // Pause console\n  WriteLn;\n  WriteLn('Press Enter key to quit');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#find-multiple-file-types-and-store-in-an-array-findfirst","title":"Find multiple file types and store in an array (FindFirst)","text":"<p>Straightforwrd, simply by extending from the previous snippet we can achieve this.</p> <ol> <li>When calling <code>FindFirst</code> use <code>*</code> or <code>*.*</code>. The Regex will do the filtering. Line 46.</li> <li>Do <code>SetLength</code> and add <code>searchRec.Name</code> into array if <code>IsFileNameMatching(searchRec.Name, regexExpression)</code> returns <code>True</code>. Line 53-63.</li> <li>Call <code>FindClose(searchRec)</code> at the end of <code>FindNext(searchRec)</code> to avoid memory leaks. Line 67.</li> </ol> <pre><code>program FindFirstSearchRegexStoreInArray;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  RegExpr;\n\n  // A function for matching filename against a regex pattern\n  function IsFileNameMatching(const fileName: string; const regexPattern: string): boolean;\n  var\n    regex: TRegExpr;\n  begin\n    regex := TRegExpr.Create;\n    try\n      // Set the regex to case-insensitive\n      regex.ModifierI := True;\n      // Apply the regex pattern\n      regex.Expression := regexPattern;\n\n      // Check for a match\n      if regex.Exec(filename) then\n        Result := True\n      else\n        Result := False;\n    finally\n      // Free TRegExpr\n      regex.Free;\n    end;\n  end;\n\nvar\n  searchRec: TSearchRec;\n  path: string = './sub-folder/';\n  regexExpression: string = '(.csv|.txt)';\n  filesFound:array of string;\n  fileCount: integer = 0;\n  i: integer;\n\nbegin\n  // Call FindFirst, append *.* to path\n  if FindFirst(path + '*.*', faAnyFile, searchRec) = 0 then\n  begin\n    repeat\n      // Skipping `.`, `..` and directories\n      if (searchRec.Name &lt;&gt; '.') and (searchRec.Name &lt;&gt; '..') and (searchRec.Attr &lt;&gt; faDirectory) then\n      begin\n        // Matching result against a regex expression\n        if IsFileNameMatching(searchRec.Name, regexExpression) then\n        begin\n          // Set length the array of string\n          SetLength(filesFound, fileCount + 1);\n          // Add file name from searchRec into this array\n          filesFound[fileCount] := searchRec.Name;\n          // Increment file counter\n          Inc(fileCount);\n          // Display files found by FindFirst\n          WriteLn(searchRec.Name);\n        end;\n      end;\n    until FindNext(searchRec) &lt;&gt; 0;\n    // MUST FREE RESOURCES relating to FindFirst and FindNext\n    FindClose(searchRec);\n  end;\n\n  // Display count of matching files\n  WriteLn(Format('Found %d files matching %s', [Length(filesFound), regexExpression]));\n\n  // Pause console\n  WriteLn;\n  WriteLn('Press Enter key to quit');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#find-multiple-file-types-recursively-findfirst","title":"Find multiple file types recursively (FindFirst)","text":"<p>See an example below, using <code>TRegExpr</code> and <code>FindFirst</code>.</p> <p>It may seem complicated, however, the algorithm in <code>SearchFiles</code> is pretty straightforward.</p> <ol> <li>Call <code>FindFirst</code> using <code>*</code> or <code>*.*</code>. The Regex will do the filtering.</li> <li> <p>In the <code>repeat ... until FindNext(searchResult) &lt;&gt; 0</code> loop;</p> <ul> <li>Check if the current <code>searchRec.name</code> it is a folder. <ul> <li>If yes, call this function, along with the name of the found folder, <code>path + searchRec.Name</code>.</li> <li>If not, use <code>IsFileNameMatching</code> to match filename against a regex expression.</li> </ul> </li> </ul> </li> <li> <p>Lastly, call <code>FindClose(searchRec)</code>.</p> </li> </ol> <pre><code>program FindFirstSearchRecursive;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  RegExpr;\n\n  // A function for matching filename against a regex pattern\n  function IsFileNameMatching(const fileName: string; const regexPattern: string): boolean;\n  var\n    regex: TRegExpr;\n  begin\n    regex := TRegExpr.Create;\n    try\n      // Set the regex to case-insensitive\n      regex.ModifierI := True;\n      // Apply the regex pattern\n      regex.Expression := regexPattern;\n\n      // Check for a match\n      if regex.Exec(filename) then\n        Result := True\n      else\n        Result := False;\n    finally\n      // Free TRegExpr\n      regex.Free;\n    end;\n  end;\n\n  // A recursive search function using FindFirst and Regex\n  procedure SearchFiles(const path: string; const regexPattern: string);\n  var\n    searchRec: TSearchRec;\n  begin\n    if FindFirst(path + '*.*', faAnyFile, searchRec) = 0 then\n    begin\n      repeat\n        if (searchRec.Name &lt;&gt; '.') and (searchRec.Name &lt;&gt; '..') then\n        begin\n          // If searchRec.Name is a directory, then call this function recursively\n          if (searchRec.Attr and faDirectory) = faDirectory then\n          begin\n            // If found a directory, perform search on that directory\n            SearchFiles(path + searchRec.Name + PathDelim, regexPattern);\n          end\n          else\n            // If searchRec.Name is not a directory, check if the file matches regex pattern\n          begin\n            if IsFileNameMatching(path + searchRec.Name, regexPattern) then\n              // If it matches regex expression, display name\n              WriteLn(path + searchRec.Name);\n          end;\n        end;\n      until FindNext(searchRec) &lt;&gt; 0;\n      // MUST RELEASE resources relating to FindFirst and FindNext\n      FindClose(searchRec);\n    end;\n  end;\n\nvar\n  path: string = './sub-folder/';\n  regexPattern: string = '(.csv|.xlsx)';\n\nbegin\n  // Display files in a path, recursively, using a regex pattern\n  SearchFiles(path, regexPattern);\n\n  // Pause Console\n  WriteLn('Press Enter key to Exit');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/dir-path-filename/#find-multiple-file-types-recursively-lazutils-package-the-most-straightforward-of-all","title":"Find multiple file types recursively (LazUtils package - The most straightforward of all)","text":"<p>You can use FindAllFiles from <code>FileUtil</code> unit.</p> <p>To use this unit, you must add <code>LazUtils</code> package from the <code>Project Inspector -&gt; Required Packages</code>.</p> <p></p> <p>Here is an example. This program looks for <code>csv</code> and <code>xslx</code> files in a sub-folder.</p> <ol> <li>Add <code>FileUtil</code> in the uses section.</li> <li> <p>Invoke the <code>FindAllFiles</code> and save the output into a <code>TStringList</code> variable. You don't need to instantiate the <code>TStringList</code> object separately; <code>FindAllFiles</code> handles it automatically. When calling this function, make sure to provide the following:</p> <ul> <li>The path to be searched.</li> <li>The types of files to be searched.</li> <li>Specify whether the search should be recursive.</li> </ul> </li> <li> <p>Lastly, free the <code>TStringList</code>.</p> </li> </ol> <pre><code>program ListAllFiles;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  FileUtil, // Add LazUtils in Project Inspector -&gt; Required Packages first\n  SysUtils;\n\nvar\n  searchResults: TStringList;\n  path: string = './sub-folder/';\n  criteria: string = '*.csv;*.xlsx';\n  isRecursive: boolean = True;\n  item: string;\n\nbegin\n\n  // Call FindAllFiles, no need to create TStringList manually\n  searchResults := FindAllFiles(path, criteria, isRecursive);\n  try\n    // Print number of files found\n    WriteLn(Format('Found %d files', [searchResults.Count]));\n\n    // Display results, if any\n    if searchResults.Count &gt; 0 then\n      for item in searchResults do WriteLn(item);\n\n  finally\n    // Free the TStringList\n    searchResults.Free;\n  end;\n\n  // Pause console\n  WriteLn;\n  WriteLn('Press Enter key to exit ...');\n  ReadLn;\nend.\n</code></pre> <p>References</p> <ul> <li>https://lazarus-ccr.sourceforge.io/docs/lazutils/fileutil/findallfiles.html</li> <li>https://www.tweaking4all.com/forum/delphi-lazarus-free-pascal/lazarus-find-all-files-in-a-directory-and-subdirectories-matching-criteria/</li> </ul>"},{"location":"docs/basics/exception-try-blocks/","title":"Exceptions","text":""},{"location":"docs/basics/exception-try-blocks/#when-do-i-use-tryfinally-blocks","title":"When do I use <code>try...finally</code> blocks?","text":"<p>Use them for the following tasks.</p> <ul> <li>clean up resources or <code>Free</code> memory within a block that allocates memory, or</li> <li>close files in case an exception occured.</li> </ul>"},{"location":"docs/basics/exception-try-blocks/#when-do-i-use-tryexception-blocks","title":"When do I use <code>try...exception</code> blocks?","text":"<p>Use them to catch exceptions and provide a means to recover in the code.</p>"},{"location":"docs/basics/exception-try-blocks/#can-i-nest-exception-handling","title":"Can I nest exception handling?","text":"<p>Yes you can. See Language Reference 17.4.</p> <p>Here is an example. The snippet below has one outer <code>try...except</code> that can catch any error from <code>TFileStream</code> or <code>TStreamReader</code>.</p> <pre><code>program ReadTextFile;\n\nuses\n  Classes, SysUtils, streamex;\n\n// Procedure to read a text file\nprocedure ReadTextFile(const filename: string);\nvar\n  fileStream: TFileStream;\n  inputReader: TStreamReader;\n  line: string;\nbegin\n  try\n    fileStream := TFileStream.Create(filename, fmOpenRead);\n    try\n      inputReader := TStreamReader.Create(fileStream);\n      try\n        while not inputReader.EOF do\n        begin\n          line := inputReader.ReadLine;\n          WriteLn(line);\n        end;\n      finally\n        inputReader.Free;\n      end;\n    finally\n      fileStream.Free;\n    end;\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\nend;\n\nbegin\n\n  // Read a file and print to std out\n  ReadTextFile('cupcake-ipsum.txt');\nend.\n</code></pre>"},{"location":"docs/basics/exception-try-blocks/#how-can-i-make-a-routine-with-nested-tryfinally-blocks-in-a-tryexcept-block-more-readable","title":"How can I make a routine with nested <code>try...finally</code> blocks in a <code>try...except</code> block more readable?","text":"<p>Tip</p> <p>..  your first goal ... to achieve a working solution, then you can think about how to make it pretty.</p> <p>- NiteHawk (Unofficial Free Pascal Discord Server)</p> <p>Short answer. Split your routine into sub-routines. Let the the last/outmost <code>try...except</code> block handle any uncaught exceptions.</p> <p>Better answer. Consider the snippet of <code>program ReadTextFile;</code> from the previous question, and the following tips from Unofficial Free Pascal Discord.</p> <p>Tip - making your code readble</p> <p>... Why not make it work with either a stream or a filename, using \"method\" overloading? The filename based version would create a corresponding stream and make use of the other variant, to avoid code duplication and improve readability.</p> <p>-NiteHawk (Free Pascal Discord Server)</p> <p>Tip - The Beauty of exceptions</p> <p>As for exception handling: The \"beauty\" of exceptions is that they trickle down the call chain until they finally get handled somewhere. That's why it makes sense to handle \"low-level\" stuff like an unconditional (= irrespective of error state) <code>Free</code> within the blocks that allocated memory. </p> <p>... I tend to handle everything else at the \"outmost\" level possible/desirable. The code below has one outer <code>try</code>..<code>except</code> that is supposed to catch any error, be it from <code>ReadTextFile(filename: string)</code> (e.g. non-existing file), or the actual stream reader.</p> <p>-NiteHawk (Free Pascal Discord Server)</p> <pre><code>program ReadTextFileOverloading;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Classes, StreamEx, SysUtils;\n\n// Procedure to read a text file from stream\nprocedure ReadTextFile(const AStream: TStream); override;\nvar\n  inputReader: TStreamReader;\n  line: string;\nbegin\n  inputReader := TStreamReader.Create(AStream);\n  try\n    while not inputReader.EOF do\n    begin\n      line := inputReader.ReadLine;\n      WriteLn(line);\n    end;\n  finally\n    inputReader.Free;\n  end;\nend;\n\n// Procedure to read a text file by file name\nprocedure ReadTextFile(const filename: string); override;\nvar\n  fileStream: TFileStream;\nbegin\n  fileStream := TFileStream.Create(filename, fmOpenRead);\n  try\n    ReadTextFile(fileStream);\n  finally\n    fileStream.Free;\n  end;\nend;\n\n// MAIN\nbegin\n  try\n    ReadTextFile('ikel.pas');\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\nend.\n</code></pre>"},{"location":"docs/basics/exception-try-blocks/#where-can-i-get-more-info-on-handling-exceptions","title":"Where can I get more info on handling exceptions?","text":"<p>The Free Pascal wiki has an article on it: Exception.</p>"},{"location":"docs/basics/file-handling/","title":"File Handling","text":"<p>Note</p> <p>The community page - File Handling in Free Pascal - gives a general overview on handling file on various use cases. There are good tips too. For example, using <code>AssignFile</code> and <code>try..except</code>, copying file, etc. </p>"},{"location":"docs/basics/file-handling/#writing-a-new-text-file","title":"Writing a new text file","text":"<p>There are many ways to do this;</p> <ol> <li>The classic style (using the File Handling Functions) and </li> <li> <p>The object style, including:</p> <ul> <li><code>TFileStream</code>.</li> <li><code>TStringList</code> and</li> </ul> </li> </ol>"},{"location":"docs/basics/file-handling/#new-text-file-classic","title":"New text file - Classic","text":"<p>See the snippet below. It uses <code>SysUtil</code> for catching errors during opening and writing file.</p> <ol> <li>Use <code>AssignFile</code> to assign a text file to a file type <code>TextFile</code>. Line 14.</li> <li>Use <code>Rewrite</code> to open file for writing (and create if doesn't exists). Line 19.</li> <li>Add text using the assigned file type and <code>WriteLn</code>. Line 22.</li> <li>Close the file with <code>CloseFile</code> in the <code>try..finally</code> block. Line 31.</li> </ol> <p>[When saving file the classic way] you should always strive to have a <code>try..finally</code> outside the <code>try..except</code>.</p> <p>-Gustavo 'Gus' Carreno</p> <pre><code>program ClassicNewTextFile;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  SysUtils;\n\nvar\n  textFile: System.TextFile;\n\nbegin\n    try\n      // Set the name of the file that will be created\n      AssignFile(textFile, 'output_file.txt');\n\n      // Enclose in try/except block to handle errors\n      try\n        // Create (if not found) and open the file for writing\n        Rewrite(textFile);\n\n        // Adding text\n        WriteLn(textFile, 'Hello Text!');\n\n      except\n        // Catch error here\n        on E: EInOutError do\n          WriteLn('Error occurred. Details: ', E.ClassName, '/', E.Message);\n      end;\n    finally\n      // Close file\n      CloseFile(textFile);\n    end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre> <p>Overly verbose with <code>try...finally</code>? It can be written as follows too.</p> <pre><code>program ClassicNewTextFileSimple;\n\n{$mode objfpc}{$H+}{$J-}\n\nvar\n  textFile: System.TextFile;\n\nbegin\n  AssignFile(textFile, 'output_file.txt');\n  ReWrite(textFile);\n  WriteLn(textFile, 'This is a new line');\n  CloseFile(textFile);\nend.\n</code></pre> <p>Warning</p> <p>But what will happen if the file if locked by another process? </p> <p>What will happen when the file accidentally got deleted before closing it?</p> <p>Boom! It will crash.</p> <p>I'd prefer to handle error gracefully. Hence, I like the first snippet better.</p>"},{"location":"docs/basics/file-handling/#new-text-file-classic-alt","title":"New text file - Classic alt","text":"<p>You can streamline the process of writing text to a file by refactoring the lines into a procedure.</p> <p>Here is an example. </p> <ul> <li>The lines that write text is refactored into a procedure. See line 9-36.</li> <li>Now, writing a text into a file is in a line. See line 41.</li> </ul> <pre><code>program ClassicNewTextFileOrganised;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  SysUtils;\n\n  // Write or append a text to a file\n  procedure WriteTextToFile(fileName: string; stringText: string;);\n  var\n    textFile: System.TextFile;\n  begin\n    try \n      // Set the name of the file that will be created\n      AssignFile(textFile, fileName);\n\n      // Enclose in try/except block to handle errors\n      try\n        // Create (if not found) and open the file for writing\n        Rewrite(textFile);\n\n        // Adding text\n        WriteLn(textFile, stringText);\n\n      except\n        // Catch error here\n        on E: EInOutError do\n          WriteLn('Error occurred. Details: ', E.ClassName, '/', E.Message);\n      end;\n    finally\n      // Close file\n      CloseFile(textFile);\n    end;\n  end;\n\nbegin\n\n  // Write a text to a file\n  WriteTextToFile('hello-text.txt', 'Hello There! How are you?');\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#new-text-file-tfilestream","title":"New text file - <code>TFileStream</code>","text":"<p>For writing text into a new file using Object style;</p> <ol> <li>create a new file; <code>TFileStream.Create(fileName, fmCreate);</code>. Line 14.</li> <li>set the current position in the stream as 0; <code>TFileStream.Position := 0;</code>. Line 17.</li> <li>write using <code>TFileStream.Write(stringText, Length(stringText));</code> Line 18.</li> <li><code>Free</code> the <code>TFileStream</code> object from memory. Lines 22.</li> </ol> <pre><code>program TFileStreamNewTextFile;\n\nuses\n  Classes, SysUtils;\n\nvar\n  text: string = 'QILT Surveys';\n  filename :String = 'hello-text.txt';\n  fileStream: TFileStream;\n  size: longint;\n\nbegin\n  // Create a TFileStream object\n  fileStream := TFileStream.Create(filename, fmCreate);\n  try\n    // set position at the beginning of file\n    fileStream.Position := 0;\n    // Write text into the file\n    size := fileStream.Write(text[1], Length(text));\n    // Show confirmation\n    Writeln(Format('Created %s. %d bytes written.', [filename, size]));\n  finally\n    // Free TFileStream object\n    fileStream.Free;\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#new-text-file-tfilestream-alt","title":"New text file - <code>TFileStream</code> (alt)","text":"<p>This example is the previous snippet wrapped in a <code>procedure</code>.</p> <pre><code>program TFileStreamNewTextFileOrganised;\n\nuses\n  Classes, SysUtils;\n\n  // Write text into a new file\n  procedure WriteStreamToFile(fileName: string; text: string);\n  var\n    fileStream: TFileStream;\n    size: longint;\n  begin\n    fileStream := TFileStream.Create(fileName, fmCreate);\n    try\n      // set position at the beginning og file\n      fileStream.Position := 0;\n      // Write text into the file\n      size := fileStream.Write(text[1], Length(text));\n      // Show confirmation\n      Writeln(Format('Created %s. %d bytes written.', [filename, size]));\n    finally\n      // Free TFileStream object\n      fileStream.Free;\n    end;\n  end;\n\nvar\n  myText: string = 'QILT Surveys';\n  filename :String = 'hello-text.txt';\n\nbegin\n\n  WriteStreamToFile(filename, myText);\n\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#new-text-file-tsringlist","title":"New text file - <code>TSringList</code>","text":"<ol> <li>Create the <code>TStringList</code> object. Line 18.</li> <li>Use the <code>Add</code> method to add text or lines. Line 21-22.</li> <li>Use <code>SaveToFile</code> to save your <code>TStringList</code> into a text file. Line 25.</li> <li>Remember to <code>Free</code> the resources. Line 28.</li> </ol> <pre><code>program TStringListNewTextFile;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes;\n\nvar\n  textFileName: string = 'hello-text.txt';\n  stringList: TStringList;\n\nbegin\n\n  // Create TStringList object\n  stringList := TStringList.Create;\n  try\n    // Add lines\n    stringList.Add('Hello Line 1!');\n    stringList.Add('Hello Line 2!');\n\n    // Save to a file\n    stringList.SaveToFile(textFileName);\n  finally\n    // Free object\n    stringList.Free;\n  end;\n\n  // Pause Console\n  WriteLn('Press Enter key to exit ...');\n  ReadLn;\n\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#create-a-blank-text-file","title":"Create a blank text file","text":""},{"location":"docs/basics/file-handling/#blank-text-file-classic","title":"Blank text file - Classic","text":"<p>Here is an example.</p> <ol> <li>Use <code>AssignFile</code> to assign a text file to a file type <code>TextFile</code>. Line 13.</li> <li>Use <code>Rewrite</code> to open file for writing (and create if doesn't exists). Line 18.</li> <li>Close the file with <code>CloseFile</code>. Line 21.</li> </ol> <pre><code>program ClassicCreateBlankTextFile;\n\nuses\n  Classes,\n  SysUtils;\n\nvar\n  filename: string = 'hello-text.txt';\n  textFile: System.TextFile;\n\nbegin\n  // Set the name of the file that will be created\n  AssignFile(textFile, filename);\n\n  // Enclose in try/except block to handle errors\n  try\n    // Open the file for writing (it will create it file doesn't exist)\n    ReWrite(textFile);\n\n    // Close file\n    CloseFile(textFile);\n\n    // Show a confirmation\n    WriteLn('Created a new blank file');\n\n  except\n    // Catch error here\n    on E: EInOutError do\n      WriteLn('Error occurred. Details: ', E.ClassName, '/', E.Message);\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#blank-text-file-tfilestream","title":"Blank text file - <code>TFileStream</code>","text":"<p>Quite straightforward.</p> <ol> <li>create a new file; <code>TFileStream.Create(fileName, fmCreate);</code>. Line 15.</li> <li><code>Free</code> the <code>TFileStream</code> object from memory. Lines 21.</li> </ol> <pre><code>program TFileStreamCreateBlankTextFile;\n\nuses\n  Classes, SysUtils;\n\nvar\n  fileName: String;\n  fileStream: TFileStream;\n\nbegin\n  fileName := 'hello-text.txt';\n\n  try\n    // Create a new file without writing anyting into it\n    fileStream := TFileStream.Create(fileName, fmCreate);\n\n    // Show a confirmation\n    Writeln('Created a blank file: ', fileName);\n  finally\n    // Free resources\n    fileStream.Free;\n  end;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#blank-text-file-tstringlist","title":"Blank text file - <code>TStringList</code>","text":"<p>See the snippet below.</p> <ol> <li>Create the <code>TStringList</code> object. Line 18.</li> <li>Use <code>SaveToFile</code> to save your <code>TStringList</code> into a text file. Line 22.</li> <li>Remember to <code>Free</code> the resources. Line 25.</li> </ol> <pre><code>program TStringListBlankFIle;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes;\n\nvar\n  textFileName: string = 'hello-text.txt';\n  stringList: TStringList;\n\nbegin\n\n  // Create TStringList object\n  stringList := TStringList.Create;\n  try\n\n    // Save to a file\n    stringList.SaveToFile(textFileName);\n  finally\n    // Free object\n    stringList.Free;\n  end;\n\n  // Pause Console\n  WriteLn('Press Enter key to exit ...');\n  ReadLn;\n\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#append-to-an-existing-text-file","title":"Append to an existing text file","text":""},{"location":"docs/basics/file-handling/#append-a-text-file-classic","title":"Append a text file - Classic","text":"<p>See an example below. The program will create a new file if the file for appending is not found.</p> <ol> <li> <p><code>AssignFile</code> and <code>CloseFile</code> is in outer <code>try..finally</code> block. This ensures the file will be closed whenever an IO error occured.</p> <ul> <li>Assign a string filename to a text file variable. Line 47.</li> <li>Remember to <code>CloseFile</code> after appending. Line 66.</li> </ul> </li> <li> <p>Appending text is inside the inner <code>try..except</code> block.</p> <ul> <li>Use <code>Append</code> to open the file in append mode. Line 52.</li> <li>Use <code>WriteLn</code> to add new text into the existing file. Line 55.</li> </ul> </li> </ol> <pre><code>program ClassicAppendTextFile;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  SysUtils;\n\n  // Create a new file, the classical way\n  procedure CreateNewFile(filename: string);\n  var\n    textFile: System.TextFile;\n  begin\n    // Set the name of the file that will be created\n    AssignFile(textFile, filename);\n\n    // Enclose in try/except block to handle errors\n    try\n      // Open the file for writing (it will create it file doesn't exist)\n      ReWrite(textFile);\n\n      // Close file\n      CloseFile(textFile);\n\n      // Show a confirmation\n      WriteLn(Format('Created a new file: ''%s''', [filename]));\n\n    except\n      // Catch error here\n      on E: EInOutError do\n        WriteLn('Error occurred. Details: ', E.ClassName, '/', E.Message);\n    end;\n  end;\n\nvar\n  filename: string = 'hello-text.txt';\n  textFile: System.TextFile;\n\nbegin\n\n  // First of all, check if the input file exists.\n  // If not, create a new text file\n  if not FileExists(filename) then\n    CreateNewFile(filename);\n\n  try\n    // Set filename to a file\n    AssignFile(textFile, filename);\n\n    // Enclose in try/except block to handle errors\n    try\n      // Open a file for appending.\n      Append(textFile);\n\n      // Adding text\n      WriteLn(textFile, 'New Line!');\n      WriteLn(textFile, 'New Line!');\n\n    except\n      // Catch error here\n      on E: EInOutError do\n        WriteLn('Error occurred. Details: ', E.ClassName, '/', E.Message);\n    end;\n\n  finally\n    // Close file\n    CloseFile(textFile);\n  end;\n\n  // Pause console\n  WriteLn('Press Enter key to quit.');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#append-a-text-file-tfilestream","title":"Append a text file - <code>TFileStream</code>","text":"<p>Quite straightforward. Remember to free <code>TFileStream</code> when done.</p> <p>See the snippet below.</p> <ol> <li> <p>Does the file  exist? </p> <ul> <li>If yes, create <code>TFileStream</code> in append mode using <code>TFileStream.Create(filename, fmOpenWrite or fmShareDenyNone)</code>. Line 23.</li> <li>If not, create <code>TFileStream</code> using <code>fmCreate</code> mode to create the new file; <code>TFileStream.Create(filename, fmCreate);</code>. Line 26.</li> </ul> </li> <li> <p>Set position to the end of the file. Line 31.</p> </li> <li>Add new text using <code>fileStream.Write</code>. Line 34.</li> <li>Free <code>TFileStream</code> object. Line 39.</li> </ol> <pre><code>program TFileStreamAppendTextFile;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  filename: string = 'hello-text.txt';\n  fileStream: TFileStream;\n  size: longint;\n  newText: string;\n\nbegin\n\n  // First, does the file exist?\n  if FileExists(fileName) then\n    // If yes, open the file in append mode.\n    fileStream := TFileStream.Create(filename, fmOpenWrite or fmShareDenyNone)\n  else\n    // If not, create a a new file.\n    fileStream := TFileStream.Create(filename, fmCreate);\n\n  // Next, start appending.\n  try\n    // set position at the end of the file\n    fileStream.Seek(0, soFromEnd);\n    // Write text into the file\n    newText := LineEnding + 'A new line!';\n    size := fileStream.Write(newText[1], Length(newText));\n    // Show confirmation\n    Writeln(Format('Appended %s. %d bytes written.', [filename, size]));\n  finally\n    // Free TFileStream object\n    fileStream.Free;\n  end;\n\n  // Pause console\n  WriteLn('Press Enter to quit.');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#append-a-text-file-tstringlist","title":"Append a text file - <code>TStringList</code>","text":"<p>The example below starts by checking if the file exists. If the files doesn't exists, exit program early.</p> <ol> <li>Create a <code>TStringList</code> object if the text file exists. Line 28.</li> <li>Load the existing text into a <code>TStringList</code> object. Line 31.</li> <li>Add new text into the <code>TStringList</code> object. Line 34-35.</li> <li>Save the appended <code>TStringList</code> into the existing file. Line 38.</li> <li>Free resources. Line 43.</li> </ol> <pre><code>program TStringListAppend;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  filename: string = 'hello-text.txt';\n  text: TStringList;\n\nbegin\n\n  // First of all, check if the input file exists.\n  // It not, exit program early.\n  if not FileExists(fileName) then\n  begin\n    WriteLn(Format('File %s does not exist. Press Enter to quit.', [filename]));\n    ReadLn;\n    Exit;\n  end;\n\n  // If file exists, create a TStringList object\n  text := TStringList.Create;\n  try\n    // Read an existing file into TStringList object\n    text.LoadFromFile(filename);\n\n    // Append more text\n    text.Add('New line!');\n    text.Add('New line!');\n\n    // Save the appended TStringList file\n    text.SaveToFile(filename);\n    WriteLn(Format('Saved to %s.', [filename]));\n\n  finally\n    // Free object\n    text.Free;\n  end;\n\n  // Pause Console\n  WriteLn('Press Enter to exit.');\n  ReadLn;\n\nend.\n</code></pre> <p>Warning</p> <p>A <code>TStringList</code> is very easy to use, but I wouldn't recommend it for a log file that gets updated very often. It is slow (because the entire file needs to be rewritten when appending just a single line) and it causes unnecessary writes on a ssd drive.</p> <p>Sebastian Z, Aug 12, 2018 at 20:56</p> <p>Source: https://stackoverflow.com/a/51808874/1179312</p>"},{"location":"docs/basics/file-handling/#read-a-text-file","title":"Read a text file","text":""},{"location":"docs/basics/file-handling/#read-a-text-file-classic","title":"Read a text file - Classic","text":"<p>The snippet below will quit if the file to read is not found.</p> <ol> <li>Assign a file to read into a <code>TextFile</code> variable. Line 24.</li> <li> <p>Within the <code>try..catch</code> do the following:</p> <ul> <li>Open the file for reading. Line 29.</li> <li>Use a while loop to read the file one line at a time. Line 32-36.</li> <li>Use close the file after reading it. Line 39.</li> </ul> </li> </ol> <pre><code>program ClassicReadTextFile;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  filename: string = 'cake-ipsum.txt';\n  textFile: System.TextFile;\n  line: string;\n\nbegin\n\n  // Provide user feedback\n  WriteLn(Format('Reading ''%s''', [filename]));\n  WriteLn('--------------------');\n\n  // Assign filename to a TextFile variable - set the name of the file for reading\n  AssignFile(textFile, filename);\n\n  // Perform the read operation in a try..except block to handle errors gracefully\n  try\n    // Open the file for reading\n    Reset(textFile);\n\n    // Keep reading lines until the end of the file is reached\n    while not EOF(textFile) do\n    begin\n      ReadLn(textFile, line);\n      WriteLn(line);\n    end;\n\n    // Close the file\n    CloseFile(textFile);\n\n  except\n    on E: Exception do\n      WriteLn('File handling error occurred. Details: ', E.Message);\n  end;\n\n  // Pause console\n  WriteLn('--------------------');\n  WriteLn('Press Enter to quit.');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#read-a-text-file-tfilestream","title":"Read a text file - <code>TFileStream</code>","text":"<p>See the snippet below as example.</p> <ol> <li>Create a <code>TFileStream</code> to open a text file for reading. Line 17.</li> <li>Create a <code>StreamReader</code> to read the text file. Line 19. </li> <li>Use the <code>while not TStreamReader.eof</code> to read the text file line by line. Line 23-28.</li> <li><code>Free</code> resources when done.</li> </ol> <p>To gracefully handle error during open and read operations, an outer <code>try..except</code> is in place.</p> <pre><code>program TStreamReaderReadFile;\n\nuses\n  Classes,\n  SysUtils,\n  streamex;\n\nvar\n  reader: TStreamReader;\n  fileStream: TFileStream;\n  line, filename:string;\n  i: integer;\nbegin\n  // filename to read\n  filename:= 'cake-ipsum-.txt';\n  try\n    fileStream := TFileStream.Create(filename, fmOpenRead);\n    try\n      reader := TStreamReader.Create(fileStream);\n      try\n        // Set line counter to 1\n        i := 1;\n        while not reader.EOF do\n        begin\n          line := reader.ReadLine;\n          WriteLn(Format('line %d is: %s', [i, line]));\n          i := i + 1;\n        end;\n      finally\n        reader.Free;\n      end;\n    finally\n      fileStream.Free;\n    end;\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#make-the-tfilestream-and-tstreamreader-code-more-readable","title":"Make the <code>TFileStream</code> and <code>TStreamReader</code> code more readable","text":"<p>The nested <code>try..free</code> blocks in the <code>try..except</code> might be difficult to read. But the code works, right?</p> <p>Here is a better strategy.</p> <ul> <li>The inner <code>try..free</code> blocks are now in separate procedures.</li> <li>The outer <code>try..except</code> can now catch exceptions from procedures.</li> </ul> <pre><code>program TStreamReaderReadFileTidy;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Classes,\n  SysUtils,\n  streamex;\n\n  // Read a stream of string line by line\n  procedure ReadTextFile(const fileStream: TStream);\n  var\n    reader: TStreamReader;\n    i: integer;\n    line: string;\n  begin\n    reader := TStreamReader.Create(fileStream);\n    try\n      // Set line counter to 1\n      i := 1;\n      while not reader.EOF do\n      begin\n        line := reader.ReadLine;\n        WriteLn(Format('line %d: %s', [i, line]));\n        i := i + 1;\n      end;\n    finally\n      reader.Free;\n    end;\n  end;\n\n  // Open a file for reading, and pass the stream to TStreamReader for reading.\n  procedure ReadTextFile(const filename: string);\n  var\n    fileStream: TFileStream;\n  begin\n    fileStream := TFileStream.Create(filename, fmOpenRead);\n    try\n      ReadTextFile(fileStream);\n    finally\n      fileStream.Free;\n    end;\n  end;\n\nvar\n  filename: string;\n\nbegin\n  // filename to read\n  filename := 'cake-ipsum.txt';\n  try\n    ReadTextFile(filename);\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#read-a-text-file-tbufferedfilestream","title":"Read a text file - <code>TBufferedFileStream</code>","text":"<p>The snippet below was adapted from one of Stephen Ball's articles, Faster filestream with TBufferedFilestream.</p> <p>The structure is similar to reading a text file using TFileStream, but here, we use <code>TBufferedFileStream</code>.</p> <ol> <li>In the <code>uses</code> section, add <code>streamex</code> and <code>buffstream</code>. Line 11, 12.</li> <li>Create a <code>TBufferedFileStream</code> to open a text file for reading. Line 30.</li> <li>Create a <code>TStreamReader</code> to read the stream. Line 32.</li> <li> <p>Use the <code>while not TStreamReader.EOF</code> to keep on reading data until there is no more data to read. Line 34-41.</p> <ul> <li>This part sequentially reads through a text file, checking each character one by one. </li> <li>It combines these characters into lines by joining them together until it finds a newline character, which indicates the end of a line. </li> <li>Once a complete line is formed, the snippet prints it out using the <code>WriteLn</code> function.</li> </ul> </li> <li> <p>Finally, <code>Free</code> the <code>TStreamReader</code> first and <code>TBufferedFileStream</code> last. Line 43 and 46.</p> </li> </ol> <p>There is an outer <code>try..except</code> is in place to handle error during open and read operations.</p> <pre><code>program TBufferedFileStreamReadFile;\n\n{$mode objfpc}{$H+}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  streamex,\n  bufstream;\n\nvar\n  fStream: TBufferedFileStream;\n  sReader: TStreamReader;\n  line: string;\n  Count: int64 = 0;\n\nbegin\n\n  if Length(ParamStr(1)) &lt; 1 then\n  begin\n    WriteLn('Please provide a valid input file.');\n    Exit;\n  end;\n\n  try\n    // Create TBufferedFileStream object\n    fStream := TBufferedFileStream.Create(ParamStr(1), fmOpenRead);\n    try\n      sReader := TStreamReader.Create(fStream);\n      try\n        // Keep on reading until there is no more data to read\n        Count := 0;\n        while not sReader.EOF do\n        begin\n          line := sReader.ReadLine;\n          Inc(Count);\n          WriteLn('Line ', IntToStr(Count), ' : ', line);\n        end;\n      finally\n        sReader.Free;\n      end;\n    finally\n      fStream.Free;\n    end;\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#read-a-text-file-tstringlist","title":"Read a text file - <code>TStringList</code>","text":"<p>Here is a snippet.</p> <ol> <li>Instantiate a <code>TStringList</code> object on line 27.</li> <li>Within the <code>try..finally</code> block, load text into a <code>TStringList</code> object on line 32.</li> <li>Use a loop to access the contents of the <code>TStringList</code> on lines 35-36.</li> <li>Release the <code>TStringList</code> object on line 40.</li> <li>Enclose the algorithm in a <code>try..except</code> block to handle exceptions when opening or reading the file.</li> </ol> <pre><code>program TStringListReadTextFile;\n\n{$mode objfpc}{$H+}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nvar\n  filename: string = 'cake-ipsum.txt';\n  stringList: TStringList;\n  line: string;\n\n// Main block\nbegin\n\n  // Provide user feedback\n  WriteLn(Format('Reading ''%s''', [filename]));\n  WriteLn('--------------------');\n\n  // Start try..except\n  try\n    // Create the TSTringList object\n    stringList := TStringList.Create;\n\n    // Start try..finally\n    try\n      // Read the file into a TStringList\n      stringList.LoadFromFile(filename);\n\n      // Use for loop to read the content of the stringList\n      for line in stringList do\n        WriteLn(line);\n\n    finally\n      // Free object from memory\n      stringList.Free;\n    end;\n\n  except\n    on E: Exception do\n      WriteLn('File handling error occurred. Details: ', E.Message);\n  end; // end of try..except\n\n  // Pause console\n  WriteLn('--------------------');\n  WriteLn('Press Enter key to quit.');\n  ReadLn;\n\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#count-lines-in-a-text-file","title":"Count lines in a text file","text":""},{"location":"docs/basics/file-handling/#count-lines-classic","title":"Count lines - Classic","text":"<p>The snippet below will quit if the file to read is not found.</p> <ol> <li>Assign a file to read into a <code>TextFile</code> variable. Line 37.</li> <li>Open the file for reading. Line 42.</li> <li>Assign a buffer to reduce disk IO. Line 44.</li> <li> <p>Within the <code>try..catch</code> do the following:</p> <ul> <li>Use a while loop to read the file one line at a time. Line 47-51.</li> <li>Use close the file after reading it. Line 54.</li> </ul> </li> </ol> <pre><code>program ClassicCountLine;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils;\n\nconst\n  BUFFER_SIZE = 131072;\n\nvar\n  filename: string;\n  textFile: System.TextFile;\n  buffer: array [0..BUFFER_SIZE - 1] of char;\n  line: string;\n  total: int64;\n\nbegin\n  // Get filename\n  filename := ParamStr(1);\n\n  // Do we have a valid input file?\n  if not FileExists(filename) then\n  begin\n    WriteLn('Please specify a valid input file.');\n    Exit;\n  end;\n\n  // Reset total\n  total := 0;\n\n  // Assign filename to a TextFile variable - set the name of the file for reading\n  AssignFile(textFile, filename);\n\n  // Perform the read operation in a try..except block to handle errors gracefully\n  try\n    // Open the file for reading\n    Reset(textFile);\n    // Set buffer\n    SetTextBuf(textFile, buffer);\n\n    // Keep reading lines until the end of the file is reached\n    while not EOF(textFile) do\n    begin\n      ReadLn(textFile, line);\n      total := total + 1;\n    end;\n\n    // Close the file\n    CloseFile(textFile);\n\n    // User feedback\n    WriteLn('Total number of lines: ', IntToStr(total));\n\n  except\n    on E: Exception do\n      WriteLn('File handling error occurred. Details: ', E.Message);\n  end;\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#count-lines-buffered-tfilestream","title":"Count lines - Buffered <code>TFileStream</code>","text":"<p>The snippet below count the occurances of <code>#10</code> in a file using buffered <code>TFileStream</code>.</p> <ol> <li>In the <code>uses</code> section, add <code>bufstream</code>. Line 11.</li> <li>Specify a buffer. Line 20.</li> <li>Create a <code>TFileStream</code> to open a text file for reading. Line 40.</li> <li>Do the line counting inside the <code>repeat..until bytesRead = 0</code> loop. Line 42-52.</li> </ol> <ul> <li>Read a chunk of bytes into a buffer</li> <li>Count number of lines in the chunk and repeat until no more bytes to read. </li> </ul> <ol> <li><code>Free</code> resources when done. Line 54.</li> </ol> <pre><code>program TBufferedFileStreamCount;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  streamex;\n\nconst\n  BufferSize = 131072; // Adjust buffer size as needed\n\nvar\n  filename: string;\n  fStream: TFileStream;\n  total: int64;\n  buffer: array[0..BufferSize - 1] of char;\n  bytesRead: integer;\n  i: integer;\n\nbegin\n  // Get filename\n  filename := ParamStr(1);\n\n  // Do we have a valid input file?\n  if not FileExists(filename) then\n  begin\n    WriteLn('Please specify a valid input file.');\n    Exit;\n  end;\n\n  // Reset total\n  total := 0;\n\n  // try - except block start\n  try\n    fStream := TFileStream.Create(filename, fmOpenRead or fmShareDenyWrite);\n    try\n      repeat\n        bytesRead := fStream.Read(buffer[0], BufferSize);\n        i := 0;\n        while i &lt; bytesRead do\n        begin\n          // Count lines in the buffer\n          if buffer[i] = #10 then\n            total := total + 1;\n          Inc(i);\n        end;\n      until bytesRead = 0;\n    finally\n      fStream.Free;\n    end;\n\n    // User feedback\n    WriteLn('Total lines:', IntToStr(total));\n\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end; // try - except block ends\nend.\n</code></pre>"},{"location":"docs/basics/file-handling/#count-lines-tstreamreader","title":"Count lines - <code>TStreamReader</code>","text":"<p>The structure is similar to reading a text file using TFileStream.</p> <p>Here is the snippet that counts the number of line by parsing the stream line by line.</p> <ol> <li>In the <code>uses</code> section, add <code>streamex</code>. Line 11.</li> <li>Create a <code>TFileStream</code> to open a text file for reading. Line 36.</li> <li>Create a <code>TStreamReader</code> to read line by line. Line 38.</li> <li>Do the line counting inside the <code>while not fReader.EOF do</code> loop. Line 40-48.</li> <li><code>Free</code> resources when done. Line 50 and 53.</li> </ol> <pre><code>program TStreamReaderCount;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  streamex;\n\nvar\n  filename: string;\n  fStream: TFileStream;\n  fReader: TStreamReader;\n  total: int64;\n  line: string;\n\nbegin\n  // Get filename\n  filename := ParamStr(1);\n\n  // Do we have a valid input file?\n  if not FileExists(filename) then\n  begin\n    WriteLn('Please specify a valid input file.');\n    Exit;\n  end;\n\n  // Reset total\n  total := 0;\n\n  // try - except block start\n  try\n    fStream := TFileStream.Create(filename, fmOpenRead or fmShareDenyWrite);\n    try\n      fReader := TStreamReader.Create(fStream, 131072, False);\n      try\n        while not fReader.EOF do\n        begin\n          // Read line\n          line := fReader.ReadLine;\n          // Process line here if needed\n          // ....\n          // Increase counter\n          total := total + 1;\n        end;\n      finally\n        fReader.Free;\n      end;\n    finally\n      fStream.Free;\n    end;\n\n    // User feedback\n    WriteLn('Total line is: ', IntToStr(total));\n\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end; // try - except block ends\nend.\n</code></pre>"},{"location":"docs/basics/funcs-procs/","title":"Functions and Procedure","text":""},{"location":"docs/basics/funcs-procs/#can-a-routine-receive-a-pointer-to-the-passed-variable","title":"Can a routine receive a pointer to the passed variable?","text":"<p>Yes. Use the <code>var</code> parameter modifier. </p> <p>The procedure gets a pointer to the variable that was passed, and uses this pointer to access the variable\u2019s value. From this, it follows that any changes made to the parameter, will propagate back to the calling block.</p> <p>FPC Language Reference 14.4.2.</p> <p>Here is an example.</p> <pre><code>program ParamModifierVar;\n\nuses\n  sysutils;\n\nprocedure AddFour(var input: integer);\nbegin\n  input := input + 4; // this line modifies the value of passed variable\nend;\n\nvar\n  myNumber: Integer = 10;\n\nbegin\n  WriteLn('myNumber is ... ', myNumber); // the value will be 10\n  AddFour(myNumber);                     // call the procedure\n  WriteLn('myNumber is ... ', myNumber); // the value will be 14\n  ReadLn;\nend. \n</code></pre>"},{"location":"docs/basics/funcs-procs/#how-to-ensure-a-passed-parameter-wont-be-changed-inside-a-routine","title":"How to ensure a passed parameter won't be changed inside a routine?","text":"<ol> <li> <p>Use <code>const</code>.</p> <ul> <li>Note. The compiler decides if the parameter will be passed by value or by reference.</li> </ul> </li> <li> <p>Alternatively, use <code>constref</code>.</p> <ul> <li>Note. This parameter is the same as <code>const</code>. Plus, it also tells the compiler that the value should be passed by reference, like a <code>var</code> parameter.</li> </ul> </li> </ol> <p>Here is an example.</p> <pre><code>program ParamModifierConst;\n\nfunction CalcAreaCircle(const radius: Real): Real;\nbegin\n\n  // Argument 'radius' has a const modifier.\n  // Hence, it is not possible to re-assign it another value.\n  // Uncommenting the following line may lead to a compile error.\n  // radius:=radius*2;\n  Result:= Pi * radius * radius;\nend;\n\nvar\n  myRadius:Real = 3.0;\n  area:Real = 0.0;\n\nbegin\n  area := CalcAreaCircle(myRadius);\n  WriteLn('The radius is ', myRadius:0:2);\n  WriteLn('The area of the circle is ', area:0:2);\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/hello-world/","title":"Run a Hello World!","text":""},{"location":"docs/basics/hello-world/#hello-world-in-lazarus-ide","title":"Hello World! in Lazarus IDE","text":""},{"location":"docs/basics/hello-world/#setup-a-project-using-a-template-and-save","title":"Setup a Project using a template and Save","text":"<ol> <li>Open Lazarus IDE.</li> <li>On the top menu bar, click <code>Project -&gt; Simple Program -&gt; OK</code></li> <li>Save your Project, by clicking <code>Project -&gt; Save Project</code>, save the Project file as <code>HelloWorld.lpi</code> in a new folder. Lazarus will save the main source file as <code>HelloWorld.lpr</code>.</li> <li>You will see a simple program in the Source Editor window. The <code>program</code>'s name will be the same as the Project's name, as shown below.</li> </ol> <pre><code>program HelloWorld;\n\nbegin\nend.\n</code></pre> <ol> <li>Now insert the following line between <code>begin</code> and <code>end.</code>.</li> </ol> <pre><code>WriteLn('Hello World!');\n</code></pre> <ol> <li>Add the following compiler directives after the <code>program</code> declaration. Make sure to add this line in all your Object Pascal codes. </li> </ol> <pre><code>{$mode objfpc}{$H+}{$J-}\n</code></pre> <p>Your final code would look as follows.</p> <pre><code>program HelloWorld;\n\n{$mode objfpc}{$H+}{$J-} // Add this line in your object pascal codes.\n\nbegin\n  WriteLn('Hello World!');\nend.\n</code></pre> <ol> <li>Press Ctrl+S to save the code.</li> </ol>"},{"location":"docs/basics/hello-world/#compile-and-run","title":"Compile and Run","text":"<p>Press F9 to run the compile and run the program.</p> <p>Can you see the <code>Hello World!</code>? </p> <p>Does the console closes immediately?</p> <p>You're on the right track. See How to prevent a console from closing when run in Lazarus IDE</p>"},{"location":"docs/basics/hello-world/#hello-world-in-your-fav-editor","title":"Hello World! in your fav editor","text":""},{"location":"docs/basics/hello-world/#create-a-pas-file","title":"Create a <code>.pas</code> file","text":"<ol> <li>Launch your favourite text editor</li> <li>Create a new file and put the following snippet in it.</li> </ol> <pre><code>{$mode objfpc}{$H+}{$J-} \n\nbegin\n    WriteLn('Hello World!');\nend.\n</code></pre> <ol> <li>Save it as <code>HelloWorld.pas</code>.</li> </ol>"},{"location":"docs/basics/hello-world/#compile-using-fpc-and-run","title":"Compile using  <code>fpc</code> and run","text":""},{"location":"docs/basics/hello-world/#windows-cli","title":"Windows CLI","text":"<p>On Windows, compile and run as follows.</p> <pre><code>fpc HelloWorld.pas &amp;&amp; HelloWorld.exe\n</code></pre> <p>If running <code>fpc</code> from CLI doesn't work, try one of the following options.</p> <ol> <li>Supply the full path to the <code>fpc</code>.</li> <li>Put the <code>fpc/bin/&lt;architecture&gt;</code> to your <code>PATH</code> then compile and run again.</li> <li>Consider using Lazarus IDE instead.</li> <li>Are you a VSCode or VSCodium user? Make sure to setup Pascal by Allesandro Fragnani properly.</li> <li>Have you considered OmniPascal?</li> </ol>"},{"location":"docs/basics/hello-world/#linux-cli","title":"Linux  CLI","text":"<p>On Linux, compile and run as follows.</p> <pre><code>fpc HelloWorld.pas &amp;&amp; ./HelloWorld.exe\n</code></pre>"},{"location":"docs/basics/hello-world/#how-to-prevent-a-console-from-closing-when-run-in-the-lazarus-ide","title":"How to prevent a console from closing when run in the Lazarus IDE?","text":"<p>When you run a console program (non-GUI), the console may dissapear immediately after you press F9. You can prevent this by adding <code>ReadLn;</code> before the program ends.</p> <pre><code>program HelloWorldPause;\n\n{$mode objfpc}{$H+}{$J-} // Add this line in your object pascal codes.\n\nbegin\n  WriteLn('Hello World!');\n\n  WriteLn('Press Enter key to exit');\n  ReadLn;\nend.                      \n</code></pre>"},{"location":"docs/basics/hello-world/#can-we-make-the-directives-more-readable","title":"Can we make the directives more readable?","text":"<p>Contribution</p> <p>\ud835\udcda\ud835\udcf8\ud835\udced\ud835\udcee\ud835\udce9\ud835\udd00\ud835\udcee\ud835\udcfb\ud835\udcf0 \ud83c\udde9\ud83c\uddea and Gustavo 'Gus' Carreno \ud83c\uddf5\ud83c\uddf9 (Unofficial Free Pascal Discord Server) suggested making directives more readable. paweld \ud83c\uddf5\ud83c\uddf1, for pointing out <code>{$longstrings on}</code>.</p> <p>Thank you!</p> <p>Sure. You can use the long names of compiler directives. See Compiler Directives. </p> <pre><code>program HelloWorldAlt;\n\n  // Here is an example using more readable complier directives\n  {$mode objfpc}\n  {$longStrings on}\n  {$writeableConst off}\n\nbegin\n  WriteLn('Hello World!');\n\n  WriteLn('Press Enter key to exit');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/immutability/","title":"Immutability","text":""},{"location":"docs/basics/immutability/#how-do-i-make-const-variables-constant","title":"How do I make <code>const</code> variables constant?","text":"<p>Add a global directive <code>{$J-}</code> to your main pascal file.</p>"},{"location":"docs/basics/immutability/#why-is-const-section-writeable-in-by-default","title":"Why is <code>const</code> section writeable in by default?","text":"<p>In Turbo Pascal 7.0, you could only assign values in the <code>const</code> section, not in <code>var</code> section.</p> <p>As the official docs mentions, by default <code>const</code> is writeable (that is <code>{$J+}</code>) to keep Turbo Pascal compatibility.</p> <p>It's a relic of old Delphi and Object Pascal and thus <code>{$J+}</code> is the default to allow old programs to compile, but it isn't required anymore</p> <p>chsh -s /usr/bin/pwsh \u2014 13/12/2023 12:09</p> <p>Consider the following program. By the default <code>{$J+}</code>, you can change the gravity of the Earth, with the gravity of the Moon!</p> <pre><code>program Immutability;\n\n{$mode objfpc}{$H+}\n\nconst\n  gravityEarth:Real = 9.81;\n\nbegin\n  gravityEarth := 1.625; // Look, we are on the moon.\n  WriteLn('The gravity on the Earth is ', gravityEarth:0:2);\nend.\n</code></pre> <p>To make <code>const</code> variables behaving like <code>const</code> variables in modern programming languages, use <code>{$J-}</code></p> <pre><code>program Immutability;\n\n{$mode objfpc}{$H+}{$J-}\n\nconst\n  gravityEarth:Real = 9.81;\n\nbegin\n  // With {$J-}, the following line will not compile\n  // gravityEarth := 1.625;\n  WriteLn('The gravity on the Earth is ', gravityEarth:0:2);\nend.\n</code></pre>"},{"location":"docs/basics/install/","title":"Install FPC and Lazarus","text":""},{"location":"docs/basics/install/#install-on-windows","title":"Install on Windows","text":""},{"location":"docs/basics/install/#get-the-fpcupdeluxe-installer","title":"Get the <code>fpcupdeluxe</code> installer","text":"<ol> <li>Head to https://github.com/LongDirtyAnimAlf/fpcupdeluxe/releases</li> <li>Download the latest <code>fpcupdeluxe</code> for your OS and architecture, and save it in a new folder.</li> <li>Run <code>fpcupdeluxe</code>.</li> </ol>"},{"location":"docs/basics/install/#install-latest-fixes-of-fpc-and-lazarus","title":"Install latest fixes of FPC and Lazarus","text":"<p>Steps.</p> <ol> <li>Set installation path.</li> <li>Click the Fixes button.</li> <li>Click Yes when the confirmation box appears. </li> </ol> <p></p> <p>The installtion of FPC and Lazarus might take a while. Sit back and relax.</p> <p>Once succesfully installed, the console will let you know a shortcut to Lazarus IDE is available on the Windows desktop.</p> <pre><code>SUCCESS: installation by fpcupdeluxe complete !\n\nFpcupdeluxe has created a desktop shortcut to start Lazarus.\nShortcut-name: Lazarus_fpcupdeluxe\nLazarus by fpcupdeluxe MUST be started with this shortcut !!\n</code></pre> <p></p>"},{"location":"docs/basics/install/#install-online-package-manager-and-dock-modules","title":"Install Online Package Manager and Dock modules","text":"<p>There are two more recommended modules to install.</p> <ul> <li>With the Online Package Manager (OPM), you can easily install online packages right within the Lazarus IDE.</li> <li>The Dock (anchordocking) module turns the Lazarus IDE into a one-window setup.</li> </ul> <p>Steps.</p> <ol> <li>Click on the Modules tab.</li> <li>Click on the OPM button. Click yes when the confirmation box appears. Wait until the installation is completed before moving to the last step.</li> <li>Click on the Dock button. Click yes when the confirmation box appears.</li> </ol> <p></p> <p>Once the installation is completed succesfully, close <code>fcpupdeluxe</code>.</p>"},{"location":"docs/basics/install/#run-lazarus_fcpupdeluxe","title":"Run <code>Lazarus_fcpupdeluxe</code>","text":"<p>At the end of the installation, you will find <code>Lazarus_fcpupdeluxe</code> on your desktop.</p> <p>Double click to run it. You will see Lazarus IDE as shown below.</p> <p></p>"},{"location":"docs/basics/install/#install-on-linux-and-macos","title":"Install on Linux and macOS","text":"<p>Consult the <code>fpcupdeluxe</code> github page.</p>"},{"location":"docs/basics/lazarus-ide/","title":"Post-Install","text":""},{"location":"docs/basics/lazarus-ide/#change-the-header-style-of-the-panels","title":"Change the header style of the panels","text":"<ol> <li>Go to Tool -&gt; Options ....</li> <li>Click on Docking/Achordocking item on the left side and set a Header Style (see the screenshot below).</li> </ol> <p>Hit the Apply button to see how the Header Style looks on the IDE.</p> <p>Hit the OK button to save the settings.</p>"},{"location":"docs/basics/lazarus-ide/#prevent-the-caret-from-moving-past-end-of-line","title":"Prevent the caret from moving past end of line","text":"<ol> <li>Go to Tools -&gt; Options ... -&gt; Editor (left hand side)</li> <li>Uncheck Allow caret to move past the end of line.</li> </ol>"},{"location":"docs/basics/lazarus-ide/#show-hint-and-completion-boxes-sooner","title":"Show hint and completion boxes sooner","text":"<ol> <li>Go to Tools -&gt; Options ... -&gt; Editor (left hand side)</li> <li>Set shorter values for <ul> <li>Delay for Delay for completion box </li> <li>Delay for hints.</li> </ul> </li> </ol>"},{"location":"docs/basics/lazarus-ide/#format-code","title":"Format code","text":"<p>Hit Ctrl+D on the code window.</p>"},{"location":"docs/basics/lazarus-ide/#setup-a-debugger-in-lazarus","title":"Setup a debugger in Lazarus","text":"<p>Citing from https://wiki.lazarus.freepascal.org/DWARF</p> <p>For GDB \"DWARFv2 with sets\" is the best option. Testing shows that, if using other (v3 and up) DWARF (as generated by FPC) then GDB is more likely to crash.</p> <p>debugger may not be able to distinguish between PChar and AnsiString All identifiers (e.g. field-names) returned by the debugger are upper-cased ... other diffs</p> <p>DWARF 2 (the one without \"with sets\") does not display sets \"type TMySet = set of (v1,v2,v3)\" correctly.</p>"},{"location":"docs/basics/lazarus-ide/#compile-and-run","title":"Compile and run","text":"<p>You have choices. Pick one.</p> <ol> <li> <p>Use F9 to compile (as necessary) and run with the debugger. The debugger notifies of any exceptions in a pop-up.</p> </li> <li> <p>Use Shift+Ctrl+F9 to compile (as necessary) and run without the debugger.</p> </li> <li> <p>Use Ctrl+F9 if you'd like to compile without running it in the IDE. You will run the executable manually via a CLI.</p> </li> </ol>"},{"location":"docs/basics/lists/","title":"Building and Processing Lists","text":"<p>This page focuses on building lists with generics instead of using the regular static and dynamic arrays.</p> <p>The reason? Conveniences. Especially when you ...</p> <ul> <li>may need to change the length of your lists often at run-time,</li> <li>may need your lists for more than just storing and retreival (sort and search).</li> </ul> <p>Otherwise, jump to I know the size of my list. How do I build one for storing and retrieval?</p>"},{"location":"docs/basics/lists/#how-can-i-make-a-list-of-string-and-sort-it","title":"How can I make a list of string and sort it?","text":"<p>Use <code>TStringList</code>. See the recipe below.</p> <ol> <li>Create a var of  <code>TStringList</code>. Line 9.</li> <li>Create the <code>TStringList</code>. Line 16.</li> <li>Append items.</li> <li><code>Sort</code> it. Line 33.</li> <li>Finally, <code>Free</code> the <code>TStringList</code>. Line 63.</li> </ol> <pre><code>program StringList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Classes;\n\nvar\n  myStringList: TStringList;\n  stringIndex: integer;\n  i: integer;\n\nbegin\n\n  // Allocate a memory for this list\n  myStringList := TStringList.Create;\n  try\n    // Add items into the list\n    myStringList.Add('cc');\n    myStringList.Add('aa');\n    myStringList.Add('bb');\n\n    // Insert at index-n, 0-indexed\n    myStringList.Insert(0, 'zero');\n\n    // Remove item at index-n\n    myStringList.Delete(0);\n\n    // Append an array of string\n    myStringList.AddStrings(['yy', 'zz - last one']);\n\n    // Sort list\n    myStringList.Sort;\n\n    // Find an exact match string, case insensitive, un-sorted\n    // A sorted TStringlist has myStringList.Sorted:=True;\n    stringIndex := myStringList.IndexOf('yy');\n    if stringIndex &gt;= 0 then\n    begin\n      WriteLn('Found yy at index: ', stringIndex);\n    end;\n\n    // Iteration for partial string mathching\n    for i := 0 to myStringList.Count - 1 do\n    begin\n      if Pos('last one', myStringList[i]) &gt; 0 then\n      begin\n        // String found at index \"i\"\n        WriteLn('Found ''last one'' at index: ', i);\n        Break; // Exit the loop if a match is found\n      end;\n    end;\n\n    // Iterate through the list\n    for i := 0 to myStringList.Count - 1 do\n      Writeln(myStringList[i]);\n\n    // Clear the list, size of the list will be 0\n    myStringList.Clear;\n\n  finally\n    // Free the list\n    myStringList.Free;\n  end;\n\n  // Pause Console\n  Readln;\n\nend.\n</code></pre>"},{"location":"docs/basics/lists/#is-there-a-tintegerlist","title":"Is there a <code>TIntegerList</code>?","text":"<p>No. Make your own type.</p>"},{"location":"docs/basics/lists/#using-genericscollections-unit","title":"Using <code>Generics.Collections</code> unit","text":""},{"location":"docs/basics/lists/#how-do-i-make-a-list-of-integer-and-sort-it","title":"How do I make a list of integer and sort it?","text":"<p>Here is an example.</p> <ol> <li>Use <code>Generics.Collections.TList</code> to create <code>TIntegerList</code>.</li> <li>Declare type <code>TIntegerList = specialize TList&lt;integer&gt;;</code>. Line 11.</li> <li>Create a new variable using the new list type - line 14.</li> <li>In the main <code>begin..end</code> block, allocate memory for the list. Line 19.</li> <li>Populate the list. Line 22-24.</li> <li>Call <code>Sort</code>. Line 30</li> <li>Lastly, free it. Line 44.</li> </ol> <pre><code>program SimpleIntegerList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Math,\n  Generics.Defaults,\n  Generics.Collections;\n\ntype\n  TIntegerList = specialize TList&lt;integer&gt;;\n\nvar\n  myIntList: TIntegerList;\n  i: integer;\n\nbegin\n  // Create a new generic list\n  myIntList := TIntegerList.Create;\n  try\n    // Add some elements to the list, use Add or AddRange (append)\n    myIntList.Add(0);\n    myIntList.Add(1);\n    myIntList.AddRange([9, 8, 7, 6, 5]);\n\n    // Access the n-th element, 0-indexed\n    WriteLn('The 3rd item is: ', myIntList[2]);\n\n    // Sorting it ascending\n    myIntList.Sort;\n\n    // Iterate through the list\n    for i := 0 to myIntList.Count - 1 do\n      Writeln(myIntList[i]);\n\n    // Get the mean\n    WriteLn('The mean is: ', Math.Mean(myIntList.ToArray): 0: 2);\n\n    // Empty the list\n    myIntList.Clear;\n\n  finally\n    // Free the memory used by the list\n    myIntList.Free;\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#how-to-create-a-custom-comparer-for-tlistt-list","title":"How to create a custom comparer for <code>TList&lt;T&gt;</code> list?","text":"<p>Here is an example of sorting <code>TList&lt;TStudent&gt;</code> by name and by age.</p> <ul> <li>Set a custom comparer for <code>TList&lt;TStudent&gt;</code>. See line 36.</li> <li>Define comparison functions. See line 39-49.</li> <li>Lastly, call the Sort using the comparison function. See line 75 and 83.</li> </ul> <pre><code>program TListCustomComparison;\n\n{$mode objfpc}{$H+}{$J-}{$modeSwitch advancedRecords}\n\nuses\n  Generics.Defaults,\n  Generics.Collections,\n  SysUtils,\n  Math;\n\ntype\n  TStudent = record\n  var\n    Name: string;\n    age: byte;\n    location: string;\n  public\n    constructor Create(newName: string; newAge: byte; newLocation: string);\n    function ToString: string;\n  end;\n\n  constructor TStudent.Create(newName: string; newAge: byte; newLocation: string);\n  begin\n    self.Name := newName;\n    self.age := newAge;\n    self.location := newLocation;\n  end;\n\n  function TStudent.ToString: string;\n  begin\n    Result := 'Row data: ' + self.Name + ' ' + IntToStr(self.age) + ' ' + self.location;\n  end;\n\ntype\n  TStudentList = specialize TList&lt;TStudent&gt;;\n  TStudentListComparer = specialize TComparer&lt;TStudent&gt;;\n\n\n  // Custom comparison function for sorting by name - ascending\n  function CompareName(constref LeftItem, RightItem: TStudent): integer;\n  begin\n    Result := CompareStr(LeftItem.Name, RightItem.Name);\n  end;\n\n  // Custom comparison function for sorting by age - ascending\n  function CompareAge(constref LeftItem, RightItem: TStudent): integer;\n  begin\n    Result := CompareValue(LeftItem.age, RightItem.age);\n  end;\n\nvar\n  studentList: TStudentList;\n  i: integer;\n\nbegin\n  // Create a new generic list\n  studentList := TStudentList.Create;\n  try\n    // Add some elements to the list by using Add or AddRange\n    studentList.Add(TStudent.Create('Asher Mo', 10, 'Sydney'));\n    studentList.AddRange(\n      [TStudent.Create('Kezia Mo', 10, 'Sydney'),\n      TStudent.Create('Irene Mo', 11, 'Sydney'),\n      TStudent.Create('Jonah Mo', 12, 'Sydney'),\n      TStudent.Create('Bob Yell', 13, 'Melbourne'),\n      TStudent.Create('Luke Earthwalker', 9, 'Canberra')]\n      );\n\n    // Printing list on console\n    WriteLn('-- Original list ------');\n    for i := 0 to studentList.Count - 1 do\n      Writeln(studentList[i].ToString);\n\n    // Sort by TStudent.name\n    studentList.Sort(TStudentListComparer.construct(@CompareName));\n\n    // Iterate through the list\n    WriteLn('-- Sorted by name ------');\n    for i := 0 to studentList.Count - 1 do\n      Writeln(studentList[i].ToString);\n\n    // Sort by TStudent.age\n    studentList.Sort(TStudentListComparer.construct(@CompareAge));\n\n    // Iterate through the list\n    WriteLn('-- Sorted by age ------');\n    for i := 0 to studentList.Count - 1 do\n      Writeln(studentList[i].ToString);\n\n  finally\n    // Free the memory used by the list\n    studentList.Free;\n\n  end;\n\n  // Pausing console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#using-fgl-unit","title":"Using <code>fgl</code> unit","text":""},{"location":"docs/basics/lists/#how-do-i-build-a-list-of-integer-using-fgl-and-sort-it","title":"How do I build a list of integer using <code>fgl</code> and sort it?","text":"<p>See the snippet below.</p> <ol> <li>In the uses section, add <code>fgl</code>. Line 6.</li> <li>Create a list type using <code>specialize TFPGList&lt;integer&gt;s</code>. Line 10.</li> <li>Create a integer comparer function for sorting. Line 13-16.</li> <li>Create a new var using the new type. Line 23.</li> <li>Add items using <code>Add()</code>. Line 26.</li> <li>Sort list using <code>Sort(@TCompareFunc)</code>. Line 35.</li> <li>Release the memory using <code>Free()</code>. Line Line 43.</li> </ol> <pre><code>program FGLIntegerList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  fgl,\n  Math;\n\ntype\n  TIntegerList = specialize TFPGList&lt;integer&gt;;\n\n  // Comparer function for sorting list\n  function CompareInt(const left, right: integer): integer;\n  begin\n    Result := CompareValue(left, right);\n  end;\n\nvar\n  myIntList: TIntegerList;\n  i: integer;\n\nbegin\n  myIntList := TIntegerList.Create;\n  try\n    // Adding integers to the list\n    myIntList.Add(444);\n    myIntList.Add(222);\n    myIntList.Add(333);\n\n    // Printing list\n    Writeln('-- Original list ----------');\n    for i := 0 to myIntList.Count - 1 do WriteLn(myIntList[i]);\n\n    // Sorting\n    myIntList.Sort(@CompareInt);\n\n    // Printing list\n    Writeln('-- Sorted list ------------');\n    for i := 0 to myIntList.Count - 1 do WriteLn(myIntList[i]);\n\n  finally\n    // Freeing the list when done\n    myIntList.Free;\n  end;\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#how-do-you-append-two-tfpglistinteger-lists","title":"How do you append two <code>TFPGList&lt;Integer&gt;</code> lists?","text":"<p>Use <code>AddList()</code>. Here is an example.</p> <pre><code>program AppendFPGList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  fgl,\n  Math;\n\ntype\n  TIntegerList = specialize TFPGList&lt;integer&gt;;\n\nvar\n  myIntList1, myIntList2: TIntegerList;\n  i: integer;\n\nbegin\n  myIntList1 := TIntegerList.Create;\n  myIntList2 := TIntegerList.Create;\n\n  // Adding integers to the lists\n  myIntList1.Add(1);\n  myIntList1.Add(2);\n  myIntList2.Add(3);\n  myIntList2.Add(4);\n\n  myIntList1.AddList(myIntList2);\n\n  // Printing the first list\n  WriteLn('The content of myIntList1 is now:');\n  for i := 0 to myIntList1.Count - 1 do\n  begin\n    WriteLn(myIntList1[i]);\n  end;\n\n  // Freeing the lists when done\n  myIntList2.Free;\n  myIntList1.Free;\n\n  ReadLn;\nend. \n</code></pre>"},{"location":"docs/basics/lists/#when-building-a-list-which-unit-is-preferable-to-use-fgl-or-genericscollections","title":"When building a list, which unit is preferable to use: <code>fgl</code> or <code>Generics.Collections</code>?","text":"<p>Consider this answer from PascalDragon, March 22, 2020, 12:55 pm.</p> <p>Just to clear these up as well:</p> <ul> <li><code>fgl</code> is a unit of generic types distributed with FPC that is smaller than <code>Generics.Collections</code> and has some restrictions and the performance might be worse; however it can be more easily be used where size of the binary is a concern</li> <li><code>Generics.Collections</code> is the name of the Delphi-compatible generic collection types (list, dictionary, etc.) which is rather powerful and performant; this is part of FPC 3.2.0 and newer ...</li> </ul> <p>Source: https://forum.lazarus.freepascal.org/index.php?topic=48988.0</p>"},{"location":"docs/basics/lists/#external-usinglgenerics-unit","title":"External - Using<code>LGenerics</code> unit","text":"<p>Before trying out snippet in this section, make sure you have installed <code>LGenerics</code> via the <code>Online Package Manager (OPM)</code> in Lazarus IDE.</p>"},{"location":"docs/basics/lists/#creating-a-list-of-integer-using-lgenerics","title":"Creating a list of integer using <code>LGenerics</code>","text":"<ol> <li>In <code>uses</code> add <code>lgVector</code>.</li> <li>Create a new type based on <code>TGVector&lt;T&gt;</code>.</li> <li>Declare a <code>var</code> to use this new list type.</li> <li>Create a new instance of the new list for use. The constructor takes an array. See line 18.</li> <li>Lastly, don't forget to <code>Free</code> your memory as shown in line 33.</li> </ol> <pre><code>program LGIntegerList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Classes,\n  lgVector;\n\ntype\n  TIntVector = specialize TGVector&lt;integer&gt;;\n\nvar\n  myInteger: TIntVector;\n  i: integer;\n\nbegin\n  // Creating a new instance\n  myInteger := TIntVector.Create([11, 33, 22, 55, 44, 66]);\n  try\n    // Adding numbers\n    myInteger.Add(1);\n    myInteger.Add(10);\n    myInteger.Add(100);\n\n    // Printing list\n    for i := 0 to myInteger.Count - 1 do\n    begin\n      WriteLn(myInteger[i]);\n    end;\n\n  finally\n    // Releasing resource\n    myInteger.Free;\n  end;\n\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#can-i-sort-a-tgvectorinteger-list","title":"Can I sort a <code>TGVector&lt;integer&gt;</code> list?","text":"<p>Easy. Follow the step below if your integer list is <code>TGVector&lt;integer&gt;</code>.</p> <ol> <li>Add <code>lgUtils</code> to the <code>uses</code> section.</li> <li>Add <code>TIntOrdHelper = specialize TGOrdVectorHelper&lt;integer&gt;;</code> in the <code>type</code> section.</li> </ol> <p>That's it. </p> <p>To sort, use the <code>TIntOrdHelper.Sort()</code> or <code>TIntOrdHelper.RadixSort()</code> methods.</p> <p>See the following example.</p> <pre><code>program LGIntegerListSort;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Classes,\n  lgVector,\n  lgUtils;\n\ntype\n  TIntVector = specialize TGVector&lt;integer&gt;;\n  TIntOrdHelper = specialize TGOrdVectorHelper&lt;integer&gt;;\n\nvar\n  myInteger: TIntVector;\n  i: integer;\n\nbegin\n  // Creating a new instance of TGVector&lt;integer&gt;\n  myInteger := TIntVector.Create([11, 33, 22, 55, 44, 66]);\n  try\n    // Adding numbers\n    myInteger.Add(1);\n    myInteger.Add(10);\n    myInteger.Add(100);\n\n    // Printing list\n    WriteLn('--original');\n    for i := 0 to myInteger.Count - 1 do\n    begin\n      WriteLn(myInteger[i]);\n    end;\n\n    // Sorting descending using .Sort()\n    TIntOrdHelper.Sort(myInteger, TSortOrder.soDesc);\n\n    // Printing sorted list\n    WriteLn('--sorted desc');\n    for i := 0 to myInteger.Count - 1 do\n    begin\n      WriteLn(myInteger[i]);\n    end;\n\n    // Sorting ascending using .RadixSort()\n    TIntOrdHelper.RadixSort(myInteger, TSortOrder.soAsc);\n\n    // Printing sorted list\n    WriteLn('--sorted asc');\n    for i := 0 to myInteger.Count - 1 do\n    begin\n      WriteLn(myInteger[i]);\n    end;\n\n  finally\n    myInteger.Free;\n  end;\n\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#i-know-the-size-of-my-list-how-do-i-build-one-for-storing-and-retrieval","title":"I know the size of my list. How do I build one for storing and retrieval?","text":""},{"location":"docs/basics/lists/#if-you-know-the-size-and-the-content-at-compile-time-static-array","title":"If you know the size and the content at compile time - static array","text":"<p>Here is an example of creating a list using static array.</p> <p>The creation of the list is at line 13.</p> <pre><code>program StaticArrayExample;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Generics.Collections;\n\ntype\n  strListHelper = specialize TArrayHelper&lt;string&gt;;\n\nvar\n  // Declaring a list of 6 elements\n  strList: array[0..5] of string = ('Zero', 'Twenty', 'Thirty', 'Forty', 'Sixty', 'Fifty');\n  minVal, maxVal: string;\n  i: integer;\n\nbegin\n  // Printing out length\n  WriteLn('The length is ', Length(strList));\n\n  // Printing out list\n  WriteLn('-- Original list ---');\n  for i := 0 to High(strList) do WriteLn(strList[i]);\n\n  // Modifying the first element\n  // strList[0] will become 'Zero One'\n  strList[0] := strList[0] + ' One';\n\n  // Sorting ascending by default using TArrayHelper&lt;T&gt;\n  WriteLn('-- Sorting list ---');\n  strListHelper.Sort(strList);\n\n  // Printing out the modified list\n  WriteLn('-- Sorted list ---');\n  for i := 0 to High(strList) do WriteLn(strList[i]);\n\n  // Pausing console, user can continue by pressing enter key\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/lists/#if-you-know-the-size-at-runtime-dynamic-array","title":"If you know the size at runtime - dynamic array","text":"<p>Here is an example using dynamic array.</p> <pre><code>program DynamicArrayExample;\n\n{$mode objfpc}{$H+}{$J-}\n{$modeswitch arrayoperators}\n\nuses\n  Generics.Collections;\n\ntype\n  strListHelper= specialize TArrayHelper&lt;string&gt;;\n\nvar\n  strList: array of string;\n  i: integer;\n\nbegin\n\n  // Set the length of the list\n  SetLength(strList, 3);\n\n  // Populating the content, of length 3\n  strList := ['Zero', 'Twenty', 'Thirty'];\n\n  // Append a literal array to the list\n  // Now the length is 6!\n  strList := strList + ['Forty', 'Sixty', 'Fifty'];\n\n  // Printing out length\n  WriteLn('The length is ', Length(strList));\n\n  // Printing out list\n  WriteLn('-- Original list ---');\n  for i := Low(strList) to High(strList) do WriteLn(strList[i]);\n\n  // Modifying the first element\n  // strList[0] will become 'Zero One'\n  strList[0] := strList[0] + ' One';\n\n  // Sorting the array using TArrayHelper&lt;T&gt;\n  WriteLn('-- Sorting list ---');\n  strListHelper.Sort(strList);\n\n  // Printing out the modified list\n  WriteLn('-- Sorted list ---');\n  for i := Low(strList) to High(strList) do WriteLn(strList[i]);\n\n  // Pausing console\n  // user can continue by pressing enter key\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/loops/","title":"Loops","text":""},{"location":"docs/basics/loops/#what-are-the-loops-in-free-pascal","title":"What are the loops in Free Pascal?","text":"<ol> <li>For Loop.</li> </ol> <pre><code>for counter := initial_value to final_value do\nbegin\n  // code to run\nend;\n</code></pre> <p>Remarks</p> <ul> <li>Free Pascal calculates the upper bound once before setting the counter variable.</li> <li>You can't change the value of a loop variable inside the loop.</li> <li>The loop variable's value is unclear after the loop ends or if the loop doesn't run. If the loop stops early due to an exception, break, or goto statement, the variable keeps its last value.</li> <li>If you're using nested procedures, the loop variable must be a local variable. Using a loop variable outside the nested procedure will cause a compiler error, but using a global variable is allowed.</li> </ul> <p>Adapted from https://www.freepascal.org/docs-html/ref/refsu58.html#x168-19200013.2.4</p> <ol> <li>For-In Loop.</li> </ol> <pre><code>for item in collection do\nbegin\n  // code to run\nend;\n</code></pre> <ol> <li>While Loop.</li> </ol> <pre><code>while condition do\nbegin\n  // code to run\nend;\n</code></pre> <ol> <li>Repeat Until Loop.</li> </ol> <pre><code>repeat\n  // code to run\nuntil condition;\n</code></pre> <ol> <li>Nested Loops.</li> </ol> <pre><code>// Basically, a loop inside another loop\n// A simple example (among many others)\n\nfor counter_a := initial_value_a to final_value_a do\n  for counter_b := initial_value_b to final_value_b do\n  begin\n    // code to run\n  end;\n</code></pre>"},{"location":"docs/basics/loops/#examples","title":"Examples","text":"<p>The snippet below demonstrates different types of loops in Free Pascal.</p> <pre><code>program Loops;\n\n  {$mode objfpc}{$H+}{$J-}\n\nvar\n  intArray: array [0..2] of integer = (10, 20, 30);\n  strArray: array of string = ('Apple', 'Banana', 'Cirtus');\n  i, j: integer; // vars for iteration\n  item: string; // var for iterating a collection of string\n  c: char = char(0);\nbegin\n\n  // 1a. For Loop -------------------------------\n  for i := 0 to 2 do\n  begin\n    WriteLn('For Loop: Value of i is ', intArray[i]);\n  end;\n\n  WriteLn('--------------------');\n\n  // 1b. For Loop using low &amp; high --------------\n  for i := low(intArray) to high(intArray) do\n  begin\n    WriteLn('For Loop with low &amp; high: ', intArray[i]);\n  end;\n\n  WriteLn('--------------------');\n\n  //2a. For-In Loop -----------------------------\n  for i in intArray do\n  begin\n    WriteLn('For-In Loop - integer: ', i);\n  end;\n\n  //2b. For-In Loop -----------------------------\n  for item in strArray do\n  begin\n    WriteLn('For-In Loop - string: ', item);\n  end;\n\n  WriteLn('--------------------');\n\n  // 3. While Loop ------------------------------\n  j := 0;\n  while j &lt;= 5 do\n  begin\n    WriteLn('While Loop from 0 until 5: ', j);\n    Inc(j);\n  end;\n\n  WriteLn('--------------------');\n\n  // 4. Repeat Until Loop -----------------------\n  repeat\n    Write('Repeat Until Loop: What is the next letter after ''a''? ');\n    ReadLn(c);\n  until c = 'b';\n  WriteLn('Yes, b is the correct answer');\n\n  WriteLn('--------------------');\n\n  // 5. An example of a Nested Loops\n  for item in strArray do\n    for i := low(intArray) to high(intArray) do\n    begin\n      Writeln('Nested Loops: For ', item, ', You can buy in pack of ', intArray[i]);\n    end;\n\n  WriteLn('--------------------');\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre> <p>If you run the program, the output would be as follows (with <code>b</code> to answer the question in the Repeat Until loop).</p> <pre><code>For Loop: Value of i is 10\nFor Loop: Value of i is 20\nFor Loop: Value of i is 30\n--------------------\nFor Loop with low &amp; high: 10\nFor Loop with low &amp; high: 20\nFor Loop with low &amp; high: 30\n--------------------\nFor-In Loop - integer: 10\nFor-In Loop - integer: 20\nFor-In Loop - integer: 30\nFor-In Loop - string: Apple\nFor-In Loop - string: Banana\nFor-In Loop - string: Cirtus\n--------------------\nWhile Loop from 0 until 5: 0\nWhile Loop from 0 until 5: 1\nWhile Loop from 0 until 5: 2\nWhile Loop from 0 until 5: 3\nWhile Loop from 0 until 5: 4\nWhile Loop from 0 until 5: 5\n--------------------\nRepeat Until Loop: What is the next letter after 'a'? b\nYes, b is the correct answer\n--------------------\nNested Loops: For Apple, You can buy in pack of 10\nNested Loops: For Apple, You can buy in pack of 20\nNested Loops: For Apple, You can buy in pack of 30\nNested Loops: For Banana, You can buy in pack of 10\nNested Loops: For Banana, You can buy in pack of 20\nNested Loops: For Banana, You can buy in pack of 30\nNested Loops: For Cirtus, You can buy in pack of 10\nNested Loops: For Cirtus, You can buy in pack of 20\nNested Loops: For Cirtus, You can buy in pack of 30\n--------------------\n</code></pre>"},{"location":"docs/basics/loops/#what-are-best-use-cases-for-each-loop","title":"What are best use cases for each loop?","text":""},{"location":"docs/basics/loops/#for-loop","title":"For Loop","text":"<p>Best for:</p> <ul> <li>Iterating a block of code over a fixed number of times.</li> <li>Keeping track of loop counter.</li> </ul> <p>For examples:</p> <ul> <li>Reading and processing all elements in a fixed-size array.</li> <li>Copying N files from one location to another.</li> </ul>"},{"location":"docs/basics/loops/#for-in-loop","title":"For-In Loop","text":"<p>Best for:</p> <ul> <li>Looping through collections, arrays, or enumerable types without manual indexing.</li> <li>Iterating tasks without a loop counter.</li> </ul> <p>Examples:</p> <ul> <li>Printing all names in a list of people.</li> <li>Checking if an object exists in an collection.</li> </ul>"},{"location":"docs/basics/loops/#while-loop","title":"While Loop","text":"<p>Best for:</p> <ul> <li>Repeating a block of code as long as a condition remains true, without knowing the exact number of repetitions in advance.</li> </ul> <p>Examples:</p> <ul> <li>Reading user input until they enter a specific value.</li> <li>Reading command line options until no more options are found.</li> </ul>"},{"location":"docs/basics/loops/#repeat-until-loop","title":"Repeat Until Loop","text":"<p>Best for:</p> <ul> <li>Like While Loop, but ensuring execution of a block of code at least once, even if the initial condition is false.</li> </ul> <p>Examples:</p> <ul> <li>A login system that repeatedly requests credentials until authentication is successful.</li> <li>Reading a CSV file while ensuring that specific columns are present before processing its contents.</li> </ul>"},{"location":"docs/basics/loops/#nested-loops","title":"Nested Loops","text":"<p>Best for:</p> <ul> <li>Working with N-dimensional arrays or collections.</li> <li>Generating patterns based on multiple arrays.</li> </ul> <p>Examples:</p> <ul> <li>Populating a 3x3 array of integer.</li> <li>Finding possible combination of words between N array of strings.</li> </ul>"},{"location":"docs/basics/numbers/","title":"Numbers","text":"<p>Random generator</p> <p>FPC 3.2.2 uses a Mersenne twister generate random numbers.</p> <p>As for trunk (2023-01-01) FPC uses Xoshiro128</p> <p>Reason? Xoshiro128 is faster, has a much smaller memory footprint and generates better random numbers.</p> <p>git: 91cf1774</p>"},{"location":"docs/basics/numbers/#how-to-generate-a-random-number","title":"How to generate a random number?","text":"<p>Call <code>Randomize</code> once, then use <code>Random()</code> function.</p> <pre><code>program RandomNumberSimple;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Math;\n\nvar\n  i: integer;\n\nbegin\n\n  // Init the random number generator.\n  Randomize;\n\n  // Generate a random number betwen 0 to 100\n  i := Random(101);\n  WriteLn(i);\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/numbers/#how-to-generate-a-random-number-integer-between-2-numbers","title":"How to generate a random number (Integer) between 2 numbers?","text":"<p>You can write a function as follows.</p> <pre><code>function RandomBetween(min, max: integer): integer;\nbegin\n  Result:= Random(max - min + 1) + min;\nend;\n</code></pre> <p>Here is the full example.</p> <pre><code>program RandomNumberBetween;\n\nfunction RandomBetween(const min, max: integer): integer;\nbegin\n  Result:= Random(max - min + 1) + min;\nend;\n\nvar\n  randomNumber: integer;\n  min, max: integer;\n\nbegin\n  min := 1;\n  max := 10;\n\n  // Initialise the randeom number generator\n  Randomize;\n\n  randomNumber := RandomBetween(2, 10);\n\n  WriteLn('Random number between ', min, ' and ', max, ' is: ', randomNumber);\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/numbers/#how-to-generate-a-random-numbers-between-2-real-numbers","title":"How to generate a random numbers between 2 real numbers?","text":"<p>You can use the function below to get a real number between 2 numbers.</p> <pre><code>function RandomNumberBetween(const min, max: real): real;\nbegin\n  Result := Random * (max - min) + min;\nend;\n</code></pre> <p>Here is the full example.</p> <pre><code>program RandomRealNumberBetween;\n\nfunction RandomNumberBetween(const min, max: real): real;\nbegin\n  Result := Random * (max - min) + min;\nend;\n\nvar\n  randomRealNumber: real;\n  min, max: real;\n\nbegin\n  min := 1.0;\n  max := 10.0;\n\n  // Initialise random number generator\n  Randomize;\n\n  // Get a random (real) number between min and max\n  randomRealNumber := RandomNumberBetween(min, max);\n\n  WriteLn('Random real number between ', min: 0: 6, ' and ', max: 0: 6, ' is: ', randomRealNumber: 0: 6);\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/numbers/#how-to-generate-a-series-of-random-real-numbers","title":"How to generate a series of random real numbers?","text":"<p>You can use <code>TGVector</code> and <code>function RandomNumberBetween(const min, max: real): real;</code> mentioned in the previous section.</p> <ol> <li>Create a new <code>type</code> to contain a list of real numbers (line 15).</li> <li>Create a new <code>var</code> based on the <code>type</code> and allocate  (line 22).</li> <li>Initialise the random number generator (line 27).</li> <li>Initialise the new list (line 30).</li> <li>Populate the list using a <code>for</code> loop (line 34-38).</li> <li>Free allocated memory for the list (line 54).</li> </ol> <pre><code>program RandomRealNumberList;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Math, lgVector;\n\nfunction RandomNumberBetween(const min, max: real): real;\nbegin\n  Result := Random * (max - min) + min;\nend;\n\ntype\n  // Create a list of real (double)\n  TRealList = specialize TGVector&lt;real&gt;;\n\nconst\n  noSample: integer = 250;\n\nvar\n  i: integer;\n  realList: TRealList;\n\nbegin\n  // Randomize initializes the random number generator by assigning a value\n  // to Randseed, which is computed based on the system clock.\n  Randomize;\n\n  // Init the real list\n  realList := TRealList.Create;\n  try\n\n    // Populating the list with random real numbers\n    WriteLn('-- Populating the list --------------------------------');\n    for i := 0 to noSample do\n    begin\n      realList.Add(RandomNumberBetween(1, 100));\n    end;\n\n    // Displaying the content of the list\n    WriteLn('-- Content of list, showing up to 4 decimals ----------');\n    for i := 0 to realList.Count - 1 do\n    begin\n      Write(realList[i]: 0: 4, ' ');\n    end;\n    WriteLn;\n\n    // Displaying the mean\n    WriteLn('-- The mean, up to 4 decimals, is ---------------------');\n    WriteLn(Math.Mean(realList.ToArray): 0: 4);\n\n  finally\n    // Free allocated resources for list\n    realList.Free;\n  end;\n\n  ReadLn;\nend.\n</code></pre> <p>Alternatively, you can use <code>array of real</code> too.</p> <p>Here is an example.</p> <pre><code>program RandomRealNumberListv2;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  Math;\n\nfunction RandomNumberBetween(const min, max: real): real;\nbegin\n  Result := Random * (max - min) + min;\nend;\n\nconst\n  noSample: integer = 250;\n\nvar\n  i: integer;\n  realList: array of real;\n\nbegin\n  // Randomize initializes the random number generator by assigning a value\n  // to Randseed, which is computed based on the system clock.\n  Randomize;\n\n  // Set size of the dynamic array\n  SetLength(realList, noSample);\n\n  // Populating the list with random real numbers\n  WriteLn('-- Populating the list --------------------------------');\n  for i := low(realList) to high(realList) do\n  begin\n    realList[i] := RandomNumberBetween(1, 100);\n  end;\n\n  // Displaying the content of the list\n  WriteLn('-- Content of list, showing up to 4 decimals ----------');\n  for i := 0 to high(realList) do\n  begin\n    Write(realList[i]: 0: 4, ' ');\n  end;\n\n  WriteLn;\n\n  // Displaying the mean\n  WriteLn('-- The mean, up to 4 decimals, is ---------------------');\n  WriteLn(Math.Mean(realList): 0: 4);\n\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/overview/","title":"Core Tasks","text":"<p>This section has recipes for doing core tasks using Free Pascal and Lazarus.</p> <p>Choose a topic from the left sidebar.</p>"},{"location":"docs/basics/regex/","title":"Regex","text":""},{"location":"docs/basics/regex/#match-a-filename-using-regex","title":"Match a filename using regex","text":"<p>Here is an example of using <code>TRegExpr</code> and <code>\\w*.txt$</code> to match <code>*.txt</code> files.</p> <ol> <li>In <code>uses</code> section add <code>RegExpr</code>. Line 11.</li> <li>Create the <code>TRegExpr</code> object Line 20.</li> <li>Enable case insensitive flag. Line 23. </li> <li>Apply the regex expression. Line 25.</li> <li>Use <code>TRegExpr.Exec</code> to find a match in the input string. Line 27.</li> <li><code>Free</code> the <code>TRegExpr</code> object at the end. Line 33.</li> </ol> <p><pre><code>program MatchingFilename;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  RegExpr;\n\nvar\n  regex: TRegExpr;\n  regexPattern: string = '\\w*.txt$';\n  filename: string = 'hello-text.txt';\n\nbegin\n  // Create TRegExpr\n  regex := TRegExpr.Create;\n  try\n    // Set the regex to case-insensitive\n    regex.ModifierI := True;\n    // Apply the regex pattern\n    regex.Expression := regexPattern;\n    // Check for a match\n    if regex.Exec(filename) then\n      WriteLn(Format('''%s'' matches %s!', [regexPattern, filename]))\n    else\n      WriteLn(Format('''%s'' does not match %s!', [regexPattern, filename]));\n  finally\n    // Free TRegExpr\n    regex.Free;\n  end;\n\n  // Pause console\n  WriteLn('Press Enter key to exit ...');\n  ReadLn;\nend.\n</code></pre> For more info check https://regex.sorokin.engineer/en/latest/tregexpr.html.</p>"},{"location":"docs/basics/regex/#match-a-filename-using-regex-alt","title":"Match a filename using regex (Alt)","text":"<p>If you find the previous snippet to be untidy, you have the option to encapsulate the regular expression matching within a function. See the snippet below, line 13-33.</p> <p>See the snippet below, matching a filename using a regex is now a one liner. Line 40.</p> <pre><code>program MatchingFilenameAlt;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  RegExpr;\n\n  // A function for matching filename against a regex pattern\n  function IsFileNameMatching(const fileName: string; const regexPattern: string): boolean;\n  var\n    regex: TRegExpr;\n  begin\n    regex := TRegExpr.Create;\n    try\n      // Set the regex to case-insensitive\n      regex.ModifierI := True;\n      // Apply the regex pattern\n      regex.Expression := regexPattern;\n      // Check for a match\n      if regex.Exec(filename) then\n        Result := True\n      else\n        Result := False;\n    finally\n      // Free TRegExpr\n      regex.Free;\n    end;\n  end;\n\nvar\n  regexPattern: string = '\\w*.txt$';\n  filename: string = 'hello-text.txt';\n\nbegin\n  if IsFileNameMatching(filename, regexPattern) then\n    WriteLn(Format('%s matches %s!', [regexPattern, filename]))\n  else\n    WriteLn(Format('%s does not match %s!', [regexPattern, filename]));\n\n  //Pause console\n  WriteLn('Press Enter kay to exit ...');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/basics/regex/#match-a-string-using-regex-and-print-out-all-matches","title":"Match a string using regex and print out all matches","text":"<p>Here is an example of using <code>TRegExpr</code> to find and print out matches, where the user specify the regex as a command line argument.</p> <p>The program will keep on asking for an input string until a match is found.</p> <ol> <li>In <code>uses</code> section add <code>RegExpr</code>. Line 21.</li> <li>Create the <code>TRegExpr</code> object using <code>ParamStr(1)</code> as the expression to evaluate. Line 33.</li> <li>Enable case insensitive flag. Line 36. </li> <li>Use <code>Exec</code> to find a match in the input string. Line 43.</li> <li>If input is found use while loop to get the values in <code>re.Matches[i]</code>. Line 48-53.</li> <li><code>Free</code> the <code>TRegExpr</code> object at the end. Line 60.</li> </ol> <pre><code>program RegexExample;\n\n// Program will quit when you give a text input matching regex pattern\n// in the program's argument.\n\n// For example.\n// $ RegexExample.exe \"(\\d{1,4})[-/.](\\d{1,2}|[a-zA-Z]{3,})[-/.](\\d{1,4})\"\n\n// Enter a text:24-Mar-2024\n// Matches!\n// Note! Match[0] is the entire match!\n// Match 0 : 24-Mar-2024\n// Match 1 : 24\n// Match 2 : Mar\n// Match 3 : 2024\n// $\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  RegExpr;\n\nvar\n  re: TRegExpr;\n  input: string;\n  i: integer;\nbegin\n\n  // If user input is '', exit program\n  if ParamStr(1) = '' then Exit;\n\n  // Create the regex object using first argument of the program\n  re := TRegExpr.Create(ParamStr(1));\n  try\n    // Set regex flag to case-insensitive\n    re.ModifierI := True;\n    // Keep on asking the user until there is a match\n    repeat\n      WriteLn;\n      Write('Enter a text:');\n      ReadLn(input);\n      // If there is a match, and match[0] (global) is not '', show all matches\n      if re.Exec(input) and (re.Match[0] &lt;&gt; '') then\n      begin\n        WriteLn('Matches!');\n        WriteLn('Note! Match[0] is the entire match!');\n        // Loop through matches using re.Matches[i]\n        i := 0;\n        while re.Match[i] &lt;&gt; '' do\n        begin\n          WriteLn('Match ', i, ' : ', re.Match[i]);\n          Inc(i);\n        end;\n      end\n      else\n        WriteLn('No match, try again.');\n    until re.Match[0] &lt;&gt; '';\n  finally\n    // Free TRegExpr object\n    re.Free;\n  end;\nend.\n</code></pre> <p>You can find the latest doc of TRegExpr here: https://regex.sorokin.engineer/en/latest/.</p>"},{"location":"docs/basics/regex/#how-can-i-replace-date-separators-with-question-marks","title":"How can I replace date separators with question marks?","text":"<p>See the example below. The algorithm is encapsulated in <code>ReplaceDateSeparatorWithQMark</code>.</p> <ol> <li>Create an instance of TRegExpr. Line 17.</li> <li>Create a regex to capture date, month and year in common formats; <code>d</code>, <code>dd</code>, <code>m</code>, <code>mm</code>, <code>mmm</code>, <code>yy</code> and <code>yyyy</code> format, in any order. Line 20. </li> <li>Use <code>TRegExpr.Replace</code> on a date string to capture potential (1)date, (2)month and (3)year groups, and put <code>?</code> between them. Also, return the result to function caller. Line 26.</li> <li><code>Free</code> the <code>TRegExpr</code> object. Line 28.</li> </ol> <pre><code>program ReplaceDateSeparators;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  RegExpr,\n  SysUtils;\n\n  function ReplaceDateSeparatorWithQMark(dateString: string): string;\n  var\n    re: TRegExpr;\n  begin\n    re := TRegExpr.Create;\n    try\n      // A regex to capture common date formats: dd.mm.yyyy, yyyy.mm.dd, dd.mmm.yy\n      re.Expression := '(\\d{1,4})[-/.](\\d{1,2}|[a-zA-Z]{3,})[-/.](\\d{1,4})';\n\n      // The next line does 3 tasks.\n      // 1. Capture date, month and year groups\n      // 2. Construct a date string and using `?` as separators\n      // 3. And return the result to function caller\n      Result := re.Replace(dateString, '$1?$2?$3', True);\n    finally\n      re.Free;\n    end;\n  end;\n\nvar\n  dateInput1: string = '24-Mar-24';\n  dateInput2: string = '24/03/24';\n  dateInput3: string = '2024/03/24';\n\nbegin\n  try\n    WriteLn(ReplaceDateSeparatorWithQMark(dateInput1));\n    WriteLn(ReplaceDateSeparatorWithQMark(dateInput2));\n    WriteLn(ReplaceDateSeparatorWithQMark(dateInput3));\n  except\n    on E: Exception do\n      WriteLn('Error: ' + E.Message);\n  end;\n  // Pause Console\n  ReadLn;\n\nend.\n</code></pre> <p>If you run the snippet above, the output would be as follows.</p> <pre><code>24?Mar?24\n24?03?24\n2024?03?24\n</code></pre>"},{"location":"docs/basics/regex/#why-would-you-convert-date-separators-to-question-marks","title":"Why would you convert date separators to question marks?","text":"<ol> <li>I needed it as a Regex practice.</li> <li>I need it when I work with <code>ScanDateTime</code>, as <code>?</code> will match any character in the input string.</li> </ol>"},{"location":"docs/basics/regex/#how-do-i-use-tregexpr-in-a-gui-application","title":"How do I use TRegExpr in a GUI application?","text":"<p>Micha\u00ebl Van Canneyt has written a concise example: Using Regular Explession.</p>"},{"location":"docs/basics/strings/","title":"Strings","text":""},{"location":"docs/basics/strings/#what-is-a-string","title":"What is a <code>String</code>?","text":"<p>Depending on compiler setting, a <code>String</code> in FPC is an alias for;</p> <ul> <li><code>ShortString</code> (fixed 255 length),</li> <li><code>AnsiString</code> (variable length) or</li> <li><code>UnicodeString</code> (UTF16).</li> </ul> <p>When <code>{$H+}</code> is not specified, or <code>{$H-}</code>, <code>String</code> is an alias for <code>ShortString</code>.</p> <p>Any <code>ShortString</code> have a maximum length of 255 characters with the implicit codepage <code>CP_ACP</code>. Short strings are always assumed to use the system code page.</p> <p>When <code>{$H+}</code> is specified, <code>String</code> is an alias for <code>AnsiString</code>.</p> <p>Any <code>String</code> is essentially an <code>AnsiString</code> with the <code>DefaultSystemCodePage</code> declared in it; <code>AnsiString(CP_ACP)</code>. And if the default system code page is <code>65001</code>, then any <code>String</code> is <code>UTF-8</code>. </p> <p>With <code>{$mode delpiunicode}</code> switch, <code>string</code> is an alias for <code>Unicodestring</code> string.</p> <p>Commonly on Windows, the system code page is <code>1252</code>. If the system code page is <code>1252</code>, then any <code>String</code> is <code>1252</code>.</p> <p>Refs:</p> <ul> <li>What is a <code>String</code>?</li> <li>https://forum.lazarus.freepascal.org/index.php?topic=58131.0</li> </ul>"},{"location":"docs/basics/strings/#display-utf-8-on-a-console","title":"Display UTF-8 on a console","text":"<pre><code>begin\n  WriteLn('\u52e4\u594b,\u52e4\u52c9\u306b\u306a\u308b,\ubd80\uc9c0\ub7f0\ud558\ub2e4!\ud83d\udc4d');\n  WriteLn('Press Enter key to exit');\n  ReadLn;\nend.                                 \n</code></pre> <p>Alternatively, you can assign your UTF-8 test to a <code>string</code> variable.</p> <pre><code>var\n  s: string = '\u52e4\u594b,\u52e4\u52c9\u306b\u306a\u308b,\ubd80\uc9c0\ub7f0\ud558\ub2e4!\ud83d\udc4d';\n\nbegin\n  WriteLn(s);\nend.                        \n</code></pre> <p>Note</p> <p>If you see garbage characters on console;</p> <ol> <li>your console might not support code page 65001, or</li> <li>your windows does not support UTF on API level (only read/write file in UTF-8)</li> </ol> <p>See this answer from StackOverflow on how to enable code page 65001 on your console.</p> <p>Warning</p> <p>The same answer from StackOverflow also shows how to enable UTF-8 on Windows (system-wide). </p> <p>DO NOT MISS the caveat section and comments in from that answer.</p> <p>Enabling UTF-8 system-wide on Windows is currently in beta and could lead to unintended system-wide side effects.</p> <p>Refs:</p> <ul> <li>https://wiki.freepascal.org/FPC_Unicode_support#Code_pages</li> <li>https://stackoverflow.com/a/57134096</li> <li>https://superuser.com/a/1435645</li> </ul>"},{"location":"docs/basics/strings/#what-is-my-systems-default-codepage","title":"What is my system's default codepage?","text":"<p>See https://www.freepascal.org/docs-html/rtl/system/defaultsystemcodepage.html</p> <pre><code>begin\n  WriteLn(DefaultSystemCodePage); \nend.                                 \n</code></pre> <p>If it says <code>65001</code>, then you should be able to see UTF-8 characters on the console.</p>"},{"location":"docs/basics/strings/#remove-trailing-chars-at-the-end-of-a-string","title":"Remove trailing chars at the end of a string","text":"<p>Contribution</p> <p>Gustavo 'Gus' Carreno, from the Unofficial Free Pascal Discord server, shared a neat trick to remove trailing characters by using <code>SetLength(str, length(str) - n);</code>.</p> <p>Let's say you have a loop that append strings with trailing characters at the end.</p> <p>One way to remove trailing characters is use a flag to inside the <code>for</code> loop. The logic would be: do not add commas or spaces if we are at the end of the loop.</p> <p>A simpler way is to use <code>SetLength(str, length(str) - n_chars_to_remove);</code>.</p> <p>See the example below. </p> <ol> <li>The <code>for</code> loop completes a sentence with a comma and a space at the end. Line 19-20.</li> <li>The trick; <code>SetLength(line, length(line) - 2);</code> removes the last 2 chars from the end of the sentence. Line 29.</li> </ol> <pre><code>program RemoveTrailingChars;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes;\n\nvar\n  cities: array of string = ('Sydney', 'Melbourne', 'Surabaya', 'Malang');\n  city, line: string;\n\nbegin\n\n  // Building a sentence using the array of string.\n  line := 'I have been to the following cities: ';\n  for city in cities do\n    line := line + city + ', ';\n\n  // Now, line has a trailing comma and a space at the end.\n  WriteLn(line);\n\n  // Here is a trick to remove additional characters at the end of a string\n  // by Gustavo 'Gus' Carreno,  2024-03-16 @ 14:42.\n  // Simply use SetLength(str, length(str) - n_chars_to_remove);\n  // Source: https://discord.com/channels/570025060312547359/896807098518732901/1218403991092985877\n  SetLength(line, length(line) - 2);\n\n  // Finally, just add a dot.\n  line := line + '.';\n  WriteLn(line);\n\n  // Pause console\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/external-systems/overview/","title":"External Systems","text":"<p>This section has recipes on interacting with outside worlds using Free Pascal and Lazarus.</p> <p>Choose a topic from the left sidebar.</p>"},{"location":"docs/external-systems/parsing-json/","title":"Parsing JSON","text":"<p>Since many services use JSON for exchanging information, wouldn't it be nice to know how to do this in Free Pascal and Lazarus?</p>"},{"location":"docs/external-systems/parsing-json/#how-do-i-make-a-get-request","title":"How do I make a GET request?","text":"<p>Note</p> <p>The snippet below is based on a fine tutorial by Marcus Fernstr\u00f6m.</p> <p>Watch the detailed explanation by Marcus on YouTube; Learn how to consume JSON data in Free Pascal</p> <p>Here is an example on making a GET request of JSON data and displaying it on console.</p> <ol> <li>In <code>uses</code> add <code>opensslsockets</code> and <code>fphttpclient</code> for making the GET request. Line 11-12.</li> <li>Set two variables. Line 16-17.<ul> <li>One for the URL. Here I use <code>https://dummyjson.com/users?limit=3</code>.</li> <li>One for the response of the GET request.</li> </ul> </li> <li>Make the GET request by using <code>TFPHTTPClient.SimpleGet(url)</code>. Line 22.</li> <li>Print result on console. Line 25.</li> </ol> <pre><code>program GetRequest;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  // For making web requests\n  opensslsockets,\n  fphttpclient;\n\n\nvar\n  url: string = 'https://dummyjson.com/users?limit=3'; // endpoint to get JSON mock data\n  rawJson: string; // a var to store raw JSON data\n\nbegin\n  // Get the raw JSON data\n  WriteLn('Contacting ', url, ' ...');\n  rawJson := TFPHTTPClient.SimpleGet(url);\n\n  // Display JSON on console\n  WriteLn(rawJson);\n\n  // Pause console\n  WriteLn('Press enter key to exit...');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/external-systems/parsing-json/#how-do-i-parse-json-from-dummyjsonorg","title":"How do I parse JSON from <code>dummyjson.org</code>?","text":"<p>Note</p> <p>Again, the snippet below is based on a fine tutorial by Marcus Fernstr\u00f6m.</p> <p>Watch the detailed explanation by Marcus on YouTube; Learn how to consume JSON data in Free Pascal</p> <p>Here is the breakdown of the example below.</p> <ol> <li>Add necessary units for making the GET requests and parsing JSON data. Line 10-15.</li> <li>Setup variables for receiving and processing the JSON data. Line 19-22.<ul> <li>A <code>string</code> to store raw JSON data.</li> <li>A <code>TJSONArray</code> for storing an array of JSON objects.</li> <li>A <code>TJSONEnum</code> for looping JSON arrays.</li> <li>A <code>TJSONObject</code> for manipulating a JSON object.</li> </ul> </li> <li>Make the GET request and store the raw JSON response. Line 27.</li> <li>Retrieve the array as TJSONArray. Line 33.<ul> <li>Convert the raw <code>JSON</code> data to <code>TJSONData</code>,</li> <li>find data called \"<code>users</code>\" (a JSON array as per dummyjson's specs) and</li> <li>Lastly, cast as <code>TJSONArray</code>.</li> </ul> </li> <li>Use the <code>TJSONEnum</code> var to loop through the JSON array. Line 36.</li> <li>To use the JSON  object in the loop, cast the <code>TJSONEnum .value</code>, which is <code>TJSONData</code> to <code>TJSONObject</code>. Line 39.</li> <li>Once you've obtained the JSONObject, use <code>FindPath</code> to get value based on a key or a path.</li> </ol> <pre><code>program ParseJSON;\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cthreads,\n  {$ENDIF}\n  Classes,\n  // For web requests\n  opensslsockets,\n  fphttpclient,\n  // For parsing JSON data\n  fpjson,\n  jsonparser;\n\nvar\n  url: string = 'https://dummyjson.com/users?limit=3'; // endpoint to get JSON mock data\n  rawJson: string;       // a var to store the raw JSON data\n  arrayJson: TJSONArray; // a var for storing an array of JSON objects\n  enumJson: TJSONEnum;   // an enum type for looping JSON arrays\n  objJson: TJSONObject;  // a var for manipulating a JSON object\n\nbegin\n  // Get the raw JSON data\n  WriteLn('Contacting ', url, ' ...');\n  rawJson := TFPHTTPClient.SimpleGet(url);\n\n  // Next, get the users array as TJSONArray;\n  // 1. convert the raw JSON data to TJSONData,\n  // 2. find data called \"users\" (a JSON array as per dummyjson's structure) and\n  // 3. cast as TJSONArray\n  arrayJson := TJSONArray(GetJSON(rawJson).FindPath('users'));\n\n  // Loop using the TJSONEnum\n  for enumJson in arrayJson do\n  begin\n    // Cast the enum value (TJSONData) to TJSONObject\n    objJson := TJSONObject(enumJson.Value);\n\n    // Output values based on keys/paths using `TJSONObject.FindPath('a_key')`\n    WriteLn('id   : ', objJson.FindPath('id').AsString);\n    WriteLn('name : ', objJson.FindPath('firstName').AsString, ' ', objJson.FindPath('lastName').AsString);\n    WriteLn('phone: ', objJson.FindPath('phone').AsString);\n    WriteLn('city : ', objJson.FindPath('address.city').AsString);\n    WriteLn('state: ', objJson.FindPath('address.state').AsString);\n    WriteLn('---');\n  end;\n\n  // Pause console\n  WriteLn('Press enter key to exit...');\n  ReadLn;\nend.\n</code></pre>"},{"location":"docs/external-systems/parsing-json/#why-do-we-use-getjsonrawjsonfindpathusers-to-get-the-array","title":"Why do we use <code>GetJSON(rawJson).FindPath('users')</code> to get the array?","text":"<p>As per the specs of <code>https://dummyjson.com/users?limit=3</code>, the array of users is in <code>users</code>. Here is an response example from the <code>/users?limit=3</code> endpoint.</p> <pre><code>{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"firstName\": \"Terry\",\n      \"lastName\": \"Medhurst\",\n      \"maidenName\": \"Smitham\",\n      \"age\": 50,\n      \"gender\": \"male\",\n      \"email\": \"atuny0@sohu.com\",\n      \"phone\": \"+63 791 675 8914\",\n      \"username\": \"atuny0\",\n      \"password\": \"9uQFF1Lh\",\n      \"birthDate\": \"2000-12-25\",\n      \"image\": \"https://robohash.org/Terry.png?set=set4\",\n      \"bloodGroup\": \"A-\",\n      \"height\": 189,\n      \"weight\": 75.4,\n      \"eyeColor\": \"Green\",\n      \"hair\": {\n        \"color\": \"Black\",\n        \"type\": \"Strands\"\n      },\n      \"domain\": \"slashdot.org\",\n      \"ip\": \"117.29.86.254\",\n      \"address\": {\n        \"address\": \"1745 T Street Southeast\",\n        \"city\": \"Washington\",\n        \"coordinates\": {\n          \"lat\": 38.867033,\n          \"lng\": -76.979235\n        },\n        \"postalCode\": \"20020\",\n        \"state\": \"DC\"\n      },\n      \"macAddress\": \"13:69:BA:56:A3:74\",\n      \"university\": \"Capitol University\",\n      \"bank\": {\n        \"cardExpire\": \"06/22\",\n        \"cardNumber\": \"50380955204220685\",\n        \"cardType\": \"maestro\",\n        \"currency\": \"Peso\",\n        \"iban\": \"NO17 0695 2754 967\"\n      },\n      \"company\": {\n        \"address\": {\n          \"address\": \"629 Debbie Drive\",\n          \"city\": \"Nashville\",\n          \"coordinates\": {\n            \"lat\": 36.208114,\n            \"lng\": -86.58621199999999\n          },\n          \"postalCode\": \"37076\",\n          \"state\": \"TN\"\n        },\n        \"department\": \"Marketing\",\n        \"name\": \"Blanda-O'Keefe\",\n        \"title\": \"Help Desk Operator\"\n      },\n      \"ein\": \"20-9487066\",\n      \"ssn\": \"661-64-2976\",\n      \"userAgent\": \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/12.0.702.0 Safari/534.24\",\n      \"crypto\": {\n        \"coin\": \"Bitcoin\",\n        \"wallet\": \"0xb9fc2fe63b2a6c003f1c324c3bfa53259162181a\",\n        \"network\": \"Ethereum (ERC20)\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"firstName\": \"Sheldon\",\n      \"lastName\": \"Quigley\",\n      \"maidenName\": \"Cole\",\n      \"age\": 28,\n      \"gender\": \"male\",\n      \"email\": \"hbingley1@plala.or.jp\",\n      \"phone\": \"+7 813 117 7139\",\n      \"username\": \"hbingley1\",\n      \"password\": \"CQutx25i8r\",\n      \"birthDate\": \"2003-08-02\",\n      \"image\": \"https://robohash.org/Sheldon.png?set=set4\",\n      \"bloodGroup\": \"O+\",\n      \"height\": 187,\n      \"weight\": 74,\n      \"eyeColor\": \"Brown\",\n      \"hair\": {\n        \"color\": \"Blond\",\n        \"type\": \"Curly\"\n      },\n      \"domain\": \"51.la\",\n      \"ip\": \"253.240.20.181\",\n      \"address\": {\n        \"address\": \"6007 Applegate Lane\",\n        \"city\": \"Louisville\",\n        \"coordinates\": {\n          \"lat\": 38.1343013,\n          \"lng\": -85.6498512\n        },\n        \"postalCode\": \"40219\",\n        \"state\": \"KY\"\n      },\n      \"macAddress\": \"13:F1:00:DA:A4:12\",\n      \"university\": \"Stavropol State Technical University\",\n      \"bank\": {\n        \"cardExpire\": \"10/23\",\n        \"cardNumber\": \"5355920631952404\",\n        \"cardType\": \"mastercard\",\n        \"currency\": \"Ruble\",\n        \"iban\": \"MD63 L6YC 8YH4 QVQB XHIK MTML\"\n      },\n      \"company\": {\n        \"address\": {\n          \"address\": \"8821 West Myrtle Avenue\",\n          \"city\": \"Glendale\",\n          \"coordinates\": {\n            \"lat\": 33.5404296,\n            \"lng\": -112.2488391\n          },\n          \"postalCode\": \"85305\",\n          \"state\": \"AZ\"\n        },\n        \"department\": \"Services\",\n        \"name\": \"Aufderhar-Cronin\",\n        \"title\": \"Senior Cost Accountant\"\n      },\n      \"ein\": \"52-5262907\",\n      \"ssn\": \"447-08-9217\",\n      \"userAgent\": \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Ubuntu/11.04 Chromium/12.0.742.112 Chrome/12.0.742.112 Safari/534.30\",\n      \"crypto\": {\n        \"coin\": \"Bitcoin\",\n        \"wallet\": \"0xb9fc2fe63b2a6c003f1c324c3bfa53259162181a\",\n        \"network\": \"Ethereum (ERC20)\"\n      }\n    },\n    {\n      \"id\": 3,\n      \"firstName\": \"Terrill\",\n      \"lastName\": \"Hills\",\n      \"maidenName\": \"Hoeger\",\n      \"age\": 38,\n      \"gender\": \"male\",\n      \"email\": \"rshawe2@51.la\",\n      \"phone\": \"+63 739 292 7942\",\n      \"username\": \"rshawe2\",\n      \"password\": \"OWsTbMUgFc\",\n      \"birthDate\": \"1992-12-30\",\n      \"image\": \"https://robohash.org/Terrill.png?set=set4\",\n      \"bloodGroup\": \"A-\",\n      \"height\": 200,\n      \"weight\": 105.3,\n      \"eyeColor\": \"Gray\",\n      \"hair\": {\n        \"color\": \"Blond\",\n        \"type\": \"Very curly\"\n      },\n      \"domain\": \"earthlink.net\",\n      \"ip\": \"205.226.160.3\",\n      \"address\": {\n        \"address\": \"560 Penstock Drive\",\n        \"city\": \"Grass Valley\",\n        \"coordinates\": {\n          \"lat\": 39.213076,\n          \"lng\": -121.077583\n        },\n        \"postalCode\": \"95945\",\n        \"state\": \"CA\"\n      },\n      \"macAddress\": \"F2:88:58:64:F7:76\",\n      \"university\": \"University of Cagayan Valley\",\n      \"bank\": {\n        \"cardExpire\": \"10/23\",\n        \"cardNumber\": \"3586082982526703\",\n        \"cardType\": \"jcb\",\n        \"currency\": \"Peso\",\n        \"iban\": \"AT24 1095 9625 1434 9703\"\n      },\n      \"company\": {\n        \"address\": {\n          \"address\": \"18 Densmore Drive\",\n          \"city\": \"Essex\",\n          \"coordinates\": {\n            \"lat\": 44.492953,\n            \"lng\": -73.101883\n          },\n          \"postalCode\": \"05452\",\n          \"state\": \"VT\"\n        },\n        \"department\": \"Marketing\",\n        \"name\": \"Lindgren LLC\",\n        \"title\": \"Mechanical Systems Engineer\"\n      },\n      \"ein\": \"48-3951994\",\n      \"ssn\": \"633-89-1926\",\n      \"userAgent\": \"Mozilla/5.0 (Windows NT 6.2; Win64; x64; rv:21.0.0) Gecko/20121011 Firefox/21.0.0\",\n      \"crypto\": {\n        \"coin\": \"Bitcoin\",\n        \"wallet\": \"0xb9fc4b4b855bc44eb30d5e36fd18f491f44a15b7\",\n        \"network\": \"Ethereum (ERC20)\"\n      }\n    }\n  ],\n  \"total\": 100,\n  \"skip\": 0,\n  \"limit\": 3\n}\n</code></pre>"},{"location":"docs/external-systems/webserver/","title":"Webserver","text":""},{"location":"docs/external-systems/webserver/#a-simple-rest-apis-returning-json-and-html-contents","title":"A simple REST APIs returning JSON and HTML contents","text":"<p>Have a look at the example below, based on a tutorial by Marcus Fernstr\u00f6m.</p> <p>The program creates a basic REST APIs with three routes.</p> <ul> <li><code>/api/timestamp</code> to give current timestamp in JSON.</li> <li><code>/api/greet/:name</code> to return a specified <code>name</code> in JSON.</li> <li><code>/404</code> for handling everything else.</li> </ul> <p>Here is the breakdown.</p> <ol> <li>In the <code>unit</code>, add <code>fphttpapp</code>, <code>HTTPDefs</code>, <code>httproute</code>, <code>fpjson</code> and <code>jsonparser</code>. Line 16-20.</li> <li>Setup port no and enable multi-threading to process incoming http requests. Line 77-78.</li> <li>Register routes and set <code>/404</code> as the default route. Line 81-83.</li> <li>Define procedures to handle the routes. Line 23-67.</li> <li>Initialise and run. Line 86-88. </li> </ol> <pre><code>program SimpleApiWebserver;\n\n// References:\n//  - https://medium.com/@marcusfernstrm/create-rest-apis-with-freepascal-441e4aa447b7\n//  - https://www.youtube.com/watch?v=9N0cxI1Hp0U\n//  - https://wiki.lazarus.freepascal.org/fpWeb_Tutorial#webserver-example\n\n{$mode objfpc}{$H+}{$J-}\n\nuses\n  {$IFDEF UNIX}\n  cmem, cthreads,\n  {$ENDIF}\n  Classes,\n  SysUtils,\n  fphttpapp,\n  HTTPDefs,\n  httproute,\n  fpjson,\n  jsonparser;\n\n  // Endpoint for getting the current timestamp\n  procedure TimestampEndPoint(aRequest: TRequest; aResponse: TResponse);\n  var\n    json: TJSONObject;\n  begin\n    json := TJSONObject.Create;\n    try\n      json.Strings['timestamp'] := FormatDateTime('yyyy-mm-dd hh:nn:ss.z', Now);\n      aResponse.Content := json.AsJSON;\n      aResponse.Code := 200;\n      aResponse.ContentType := 'application/json';\n      aResponse.ContentLength := Length(aResponse.Content);\n      aResponse.SendContent;\n    finally\n      json.Free;\n    end;\n\n  end;\n\n  // An endpoint accepting a variable\n  procedure GreetEndpoint(aRequest: TRequest; aResponse: TResponse);\n  var\n    json: TJSONObject;\n  begin\n    json := TJSONObject.Create;\n    try\n      json.Strings['message'] := 'Hello, ' + aRequest.RouteParams['name'];\n      aResponse.Content := json.AsJSON;\n      aResponse.Code := 200;\n      aResponse.ContentType := 'application/json';\n      aResponse.ContentLength := Length(aResponse.Content);\n      aResponse.SendContent;\n    finally\n      json.Free;\n    end;\n  end;\n\n  // An endpoint to handle unknown requests\n  procedure ErrorEndPoint(aRequest: TRequest; aResponse: TResponse);\n  begin\n    aResponse.Content := '&lt;h1&gt;404!&lt;/h1&gt;&lt;h3&gt;How did you get here?&lt;/h3&gt;';\n    aResponse.Code := 404;\n    aResponse.ContentType := 'text/html';\n    aResponse.ContentLength := Length(aResponse.Content);\n    aResponse.SendContent;\n  end;\n\n\nconst\n  port: integer = 8080;\n  isThreaded: boolean = True;\n\nbegin\n\n  // Set port no &amp; enable multi-threading to handle http requests\n  Application.Port := port;\n  Application.Threaded := isThreaded;\n\n  // Setup routes\n  HTTPRouter.RegisterRoute('/api/timestamp', rmGet, @TimestampEndPoint);\n  HTTPRouter.RegisterRoute('/api/greet/:name', rmGet, @GreetEndpoint);\n  HTTPRouter.RegisterRoute('/404', rmGet, @ErrorEndPoint, True); // Set as the default endpoint\n\n  // Initialise and run, with a message\n  Application.Initialize;\n  WriteLn('== Server is running on port ', port, ' ===');\n  Application.Run;\n\nend.\n</code></pre> <p>How to use</p> <ul> <li>Run the program.</li> <li>To get the current timestamp, put into your browser: <code>http://127.0.0.1:8080/api/timestamp</code>.</li> <li>To get a greeting in json, put into your browser: <code>http://127.0.0.1:8080/api/greet/Jonathan</code>.</li> <li>Non-matching endpoints will get you to: <code>http://127.0.0.1:8080/404</code>.</li> </ul> <p>References</p> <ul> <li>https://medium.com/@marcusfernstrm/create-rest-apis-with-freepascal-441e4aa447b7</li> <li>https://www.youtube.com/watch?v=9N0cxI1Hp0U</li> <li>https://wiki.lazarus.freepascal.org/fpWeb_Tutorial#webserver-example</li> </ul>"},{"location":"docs/resources/docs-sites/","title":"Relevant Documents and Sites","text":""},{"location":"docs/resources/docs-sites/#beginner","title":"Beginner","text":"<ul> <li><code>#lazarus</code> Laz Planet Tutorials</li> <li><code>#fpc</code> Free Pascal from Square One by Jeff Duntemann.</li> <li><code>#fpc</code> Tao Yue's Pascal Tutorial, which also available on Free Pascal's wiki.</li> <li><code>#fpc</code> Tutorials Point's Pascal Tutorial</li> </ul>"},{"location":"docs/resources/docs-sites/#experienced-veteran","title":"Experienced - Veteran","text":"<ul> <li><code>#fpc</code> Modern Object Pascal Introduction for Programmers</li> <li><code>#fpc</code> Pascal cheat sheet from learnxinyminutes.com.</li> <li><code>#fpc</code> Pascal Programming idioms from programming-idioms.org.</li> <li><code>#fpc</code> <code>#lazarus</code> 5-part SQLdb tutorial<ul> <li>0 - Database set-up</li> <li>1 - Getting started</li> <li>2 - Editing</li> <li>3 - Queries</li> <li>4 - Data modules</li> </ul> </li> <li><code>#fpc</code> <code>#lazarus</code> Working with SQLite3 database using SQLdb components</li> </ul>"},{"location":"docs/resources/docs-sites/#the-official-free-pascal-resources","title":"The Official Free Pascal Resources","text":"<p>The latest documents are available from Free Pascal site and GitLab FPC Documentation repo.</p> <ul> <li>FPC User's guide </li> <li>FPC Programmer's guide </li> <li>FPC Language reference guide  </li> <li>Run-Time Library (RTL) units reference manual  </li> <li>Free Component Library (FCL) units reference manual  </li> <li>Free Component Library (FCL) Resource units reference manual  </li> <li>fpdoc documentation tool reference manual  </li> <li>Reference chart with all compiler options and switches </li> </ul>"},{"location":"docs/resources/docs-sites/#the-official-lazarus-ide-resources","title":"The Official Lazarus IDE Resources","text":"<ul> <li>See Lazarus' wiki for various docs on installation, IDE, tools, LCL, Components and other topics.</li> <li>Working with Lazarus and databases - https://wiki.freepascal.org/Databases</li> </ul> <p>Documentation is converted to html from xml files - xml files are created using FPDoc Editor: https://wiki.freepascal.org/FPDoc_Editor. All xml files with documentation can be found here: https://gitlab.com/freepascal.org/lazarus/lazarus/-/tree/main/docs/xml</p> <p>If you want to modify the conversion to html start with: https://gitlab.com/freepascal.org/lazarus/lazarus/-/tree/main/docs/html</p> <p>Quoted from paweld \ud83c\uddf5\ud83c\uddf1 \u2014 19/11/2023 21:53</p>"},{"location":"docs/resources/fpc-laz-packages/","title":"Packages","text":""},{"location":"docs/resources/fpc-laz-packages/#what-are-packages","title":"What are Packages?","text":"<p>Basically, packages are add-ons you can install to add or modify functionalities of your programs or the Lazarus IDE.</p> <p>There are various kinds of packages for Free Pascal &amp; Lazarus IDE. The following is a summary from https://wiki.freepascal.org/packages(disambiguation)</p> <p>Packages have different meanings FPC &amp; Lazarus projects.</p> <p>Types of packages:</p> <ul> <li>Lazarus Runtime Packages adds a dependency on a runtime package and Lazarus adds the files to the search path.</li> <li>Lazarus (IDE)Packages is bundled with IDE and can be installed via main menu: <code>Package -&gt; Install/Uninstall Packages..</code>.</li> <li>Lazarus Designtime Packages register themselves in the IDE, e.g. designtime editor components for the object inspector. These may contain runtime-only units.</li> <li>Fppkg is a Free Pascal packaging system, which installs packages based on FPMake.</li> </ul>"},{"location":"docs/resources/fpc-laz-packages/#package-managers","title":"Package Managers","text":"<ul> <li>Online Package Manager(GUI) - https://wiki.freepascal.org/Online_Package_Manager</li> <li>fpcupdeluxe(GUI) - https://github.com/LongDirtyAnimAlf/fpcupdeluxe/releases</li> <li>LazarusPackageManager(CLI) - https://github.com/Warfley/LazarusPackageManager</li> <li>fppkg (CLI) - https://wiki.freepascal.org/fppkg</li> </ul>"},{"location":"docs/resources/fpc-laz-packages/#fpc-lazarus-packages","title":"FPC &amp; Lazarus Packages","text":"<p>Note</p> <p>I only listed packages that are relevant for my projects and works with Free Pascal and Lazarus IDE. </p> <p>There are more packages (and visual components) out there than listed here. </p> <ul> <li>https://github.com/Fr0sT-Brutal/awesome-pascal</li> <li>https://wiki.freepascal.org/Components_and_Code_examples#Default_components_provided_by_Lazarus</li> <li>https://wiki.freepascal.org/Package_List</li> <li>https://wiki.freepascal.org/Category:Libraries</li> <li>https://packages.lazarus-ide.org</li> <li>BeniBella's collection - https://www.benibela.de/sources_en.html#top</li> <li>Check the forums and discord channel too.</li> </ul>"},{"location":"docs/resources/fpc-laz-packages/#lgenerics","title":"LGenerics","text":"<p><code>#generics</code></p> <p>A Generics library with tons of goodies by A.Koverdyaev(avk).</p>"},{"location":"docs/resources/fpc-laz-packages/#arrayhelper","title":"ArrayHelper","text":"<p><code>#array-helper</code></p> <p>Delphi class helper for TArray with functions like Add, Delete, IndexOf, Map, etc. Includes examples and testing. Extends TArray with functions similar to TList or TStrings for easier memory management. Introduces TArrayRecord to use dynamic arrays like objects without the need for a final Free call.</p>"},{"location":"docs/resources/fpc-laz-packages/#currency-type","title":"Currency type","text":"<p><code>#finance</code></p> <p>Actually, <code>Currency</code> is a data type in Free Pascal. </p>"},{"location":"docs/resources/fpc-laz-packages/#indy","title":"Indy","text":"<p><code>#network</code></p> <p>Indy -- Internet Direct -- is a well-known internet component suite for Delphi, C++Builder, and Free Pascal providing both low-level support (TCP, UDP, raw sockets) and over a 120 higher level protocols (SMTP, POP3, NNT, HTTP, FTP) for building both client and server applications.</p>"},{"location":"docs/resources/fpc-laz-packages/#zeoslib","title":"ZeosLib","text":"<p><code>#lazarus</code> <code>#database</code></p> <p>The ZeosLib is a set of database components for MySQL, MariaDB, PostgreSQL, Interbase, Firebird, MS SQL Server, SAP Adaptive Server Enterprise and Adaptive Server Anywhere (previously Sybase), Oracle and SQLite for Delphi, FreePascal/Lazarus and C++ Builder.</p>"},{"location":"docs/resources/fpc-laz-packages/#mormot2","title":"mORMot2","text":"<p><code>#database</code></p> <p>Synopse mORMot 2 is an Open Source Client-Server ORM SOA MVC framework for Delphi 7 up to Delphi 11 Alexandria and FPC 3.2/trunk, targeting Windows/Linux/BSD/MacOS for servers, and any platform for clients (including mobile or AJAX).</p>"},{"location":"docs/resources/fpc-laz-packages/#fundamentals-5","title":"Fundamentals 5","text":"<p><code>#utils</code></p> <p>Fundamentals 5 is a library for Delphi and Free Pascal. This library can help with the following tasks.</p> <ul> <li>String, DateTime and dynamic array routines</li> <li>Unicode routines</li> <li>Hash (e.g. SHA256, SHA512, SHA1, SHA256, MD5)</li> <li>Integer (e.g. Word128, Word256, Int128, Int256)</li> <li>Huge Word, Huge Integer</li> <li>Decimal (Decimal32, Decimal64, Decimal128, HugeDecimal and signed decimals)</li> <li>Random number generators</li> <li>Cryptographic (Symmetric: AES, DES, RC2, RC4; Asymmetric: RSA, Diffie-Hellman, Elliptic Curve)</li> <li>Data structures (array, dictionary and map classes)</li> <li>Mathematics (Rational number, complex number, vector, matrix, statistics)</li> <li>JSON parser</li> <li>Google protocol buffer parser, utilities and Pascal code generator</li> <li>Socket library (cross platform - Windows, Linux, OSX, iOS, Android)</li> <li>TLS Client</li> <li>TLS Server</li> <li>TCP Client</li> <li>TCP Server</li> <li>HTTP Client</li> <li>HTTP Server</li> <li>HTML Parser</li> <li>XML Parser</li> </ul>"},{"location":"docs/resources/fpc-laz-packages/#atsynedit","title":"ATSynEdit","text":"<p><code>#lazarus</code> <code>#visual-component</code></p> <p>ATSynEdit is Multi-line editor control for Lazarus, which was made by Alexey Torgashin as an alternative to SynEdit. It is not based on SynEdit, it has totally different structure.</p>"},{"location":"docs/resources/videos/","title":"Videos","text":"<p>Note</p> <p>Info and links on this page compiled from Free Pascal &amp; Lazarus sites (official sites, wikis, Discord), Udemy, and Youtube.</p>"},{"location":"docs/resources/videos/#udemy","title":"Udemy","text":"<ul> <li>Learn Pascal Programming from Scratch by Stone River eLearning. Last updated 02/2017.</li> <li>Learn To Program with Delphi and Object Pascal by Huw Collingbourne. Last updated 02/2023.</li> <li>Learn Algorithms with Object Pascal/Delphi 2022 by Muminjon Abduraimov. Last updated 01/2023.</li> </ul>"},{"location":"docs/resources/videos/#swinbourne-university-of-technology","title":"Swinbourne University of Technology","text":""},{"location":"docs/resources/videos/#introduction-to-programming-in-free-pascal","title":"Introduction to programming in Free Pascal","text":"<p>Published 2015. Last updated 2021.</p> <ul> <li>0.1 Introduction to programming in FPC</li> <li>0.2 Installing FPC in Linux</li> <li>0.3 Installing FPC in macOS</li> <li>0.4 Installing FPC in Windows</li> <li>1.1 Programs and sequence</li> <li>1.2 Programs and Procedures</li> <li>2.1 Variables</li> <li>2.2 Procedures with parameters</li> <li>2.3 Functions</li> <li>2.4 Hand execution</li> <li>3.1 Control flow</li> <li>3.2 If statements</li> <li>3.3 Looping</li> <li>3.4 Case statements</li> <li>3.5 Modules</li> <li>3.6 File I/O</li> <li>4.1 Records</li> <li>4.2 Enumerations</li> <li>4.3 Pointers</li> <li>4.4 Function Pointers</li> <li>5.1 Arrays</li> <li>5.2 Dynamic arrays</li> <li>6.1 Abstraction</li> </ul>"},{"location":"docs/resources/videos/#hello-world-computing","title":"Hello World Computing","text":""},{"location":"docs/resources/videos/#pascal-tutorials","title":"Pascal: Tutorials","text":"<p>Last updated on 30 May 2014.</p> <ul> <li>Part 1 - Getting to know Pascal</li> <li>Part 2 - Hello World!</li> <li>Part 3 - Input / Output</li> <li>Part 4 - Variables and their roles</li> <li>Part 5 - Simple Mathematics</li> <li>Part 6 - Simple Calculator</li> </ul>"},{"location":"docs/resources/videos/#schoolfreeware","title":"SchoolFreeware","text":""},{"location":"docs/resources/videos/#free-pascal-tutorial","title":"Free Pascal Tutorial","text":"<p>Last updated on 2 Jul 2014. </p> <ul> <li>1 - Getting Started - Lazarus Download Link</li> <li>2 - Math Examples</li> <li>3 - Variables and Data Types</li> <li>4 - User Input</li> <li>5 - If Statements</li> <li>6 - Case Statement</li> <li>7 - While Loop</li> <li>8 - Repeat Until Loop</li> <li>9 - For Loop</li> <li>10 - Input Validation</li> <li>11 - Preventing Crashes With Val</li> <li>12 - Menus For User Friendly Programs</li> <li>13 - Random Numbers Code Example</li> <li>14 - Guess My Number Game</li> <li>15 - Procedures</li> <li>16 - Passing Values To Procedures</li> <li>17 - Function Examples</li> <li>18 - Arrays</li> <li>19 - Gotoxy Screen Location</li> <li>20 - Parallel Arrays</li> <li>21 - 2 Dimensional Arrays - Matrix</li> <li>22 - Finding The Highest And Lowest Array Element</li> <li>23 - Preventing Duplicate Data In Arrays</li> <li>24 - String Manipulation</li> <li>25 - Palindrome Strings</li> <li>26 - Separating Strings With ASCII Codes</li> <li>27 - Separating Strings With Ranges</li> <li>28 - Running External Programs - IE Batch MS Paint</li> <li>29 - On The Record</li> <li>30 - Array Of Record</li> <li>31 - Making And Writing To Text Files</li> <li>32 - Reading Text Files</li> </ul>"},{"location":"docs/resources/videos/#free-pascal-app-tutorial","title":"Free Pascal App Tutorial","text":"<ul> <li>App Tutorial 1 - Getting Started And Free Download Link</li> <li>App Tutorial 2 - Shrinking The Application File Size</li> <li>App Tutorial 3 - Events Example Code</li> <li>App Tutorial 4 - The Meaning Of Life Explained</li> <li>App Tutorial 5 - Simple Calculator Part 1 - Form Setup</li> <li>App Tutorial 6 - Simple Calculator Part 2 - String Conversion</li> <li>App Tutorial 7 - Simple Calculator Part 3 - Radio Buttons</li> <li>App Tutorial 8 - Simple Calculator Part 4 - Try Except Error Handling</li> <li>App Tutorial 9 - Simple Calculator Part 5 - Tabs - Finished Application</li> <li>App Tutorial 10 - Playing Wav Sound Files On Windows computers</li> <li>App Tutorial 11 - Playing Wav Sound Files On Mac computers</li> <li>App Tutorial 12 - System Timer Bouncing Ball Animation - Shapes</li> <li>App Tutorial 13 - Bouncing Balls Animation - Parallel Arrays</li> <li>App Tutorial 14 - OnPaint Drawing</li> </ul>"},{"location":"docs/resources/videos/#prepared-mindfulness","title":"Prepared Mindfulness","text":""},{"location":"docs/resources/videos/#lazarus-rad-pascal","title":"Lazarus - RAD Pascal","text":"<p>Last updated on 3 Jun 2014.</p> <ul> <li>Learning to program 1 - Pascal Lazarus - Install a free IDE</li> <li>Learning to program 2 - Pascal Lazarus - Hello World - Making the window</li> <li>Learning to program 3 - Pascal Lazarus - Variables</li> </ul>"},{"location":"docs/resources/videos/#marcus-fernstrom","title":"Marcus Fernstr\u00f6m","text":""},{"location":"docs/resources/videos/#tech-swords","title":"Tech &amp; Swords","text":"<p>Last updated 2022.</p> <ul> <li>Install FreePascal, Lazarus, Packages, Cross Compilers, and OPM the EASY way</li> <li>Lazarus build modes, cross compiling, and testing the app in a Linux virtual machine</li> <li>Create REST APIs in FreePascal &amp; Lazarus</li> <li>Generate JSON Data in FreePascal / Lazarus</li> <li>Create REST APIs in FreePascal &amp; Lazarus (with zoom)</li> <li>Learn how to consume JSON data in FreePascal</li> <li>MySQL and FreePascal</li> </ul>"}]}